<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/jbossbuzz" /><feedburner:info uri="jbossbuzz" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry><title>This Week in JBoss: February 20, 2020</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/bU9__OGEtsQ/this-week-in-jboss-february-20-2020" /><category term="apache-camel" scheme="searchisko:content:tags" /><category term="Drools" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_weeklyeditorial" scheme="searchisko:content:tags" /><category term="infinispan" scheme="searchisko:content:tags" /><category term="jBPM" scheme="searchisko:content:tags" /><category term="keycloak" scheme="searchisko:content:tags" /><category term="springboot" scheme="searchisko:content:tags" /><author><name>Romain Pelisse</name></author><id>searchisko:content:id:jbossorg_blog-this_week_in_jboss_february_20_2020</id><updated>2020-02-20T12:44:09Z</updated><published>2020-02-20T12:44:09Z</published><content type="html">&lt;!-- [DocumentBodyStart:ad51e209-a314-4400-967d-ec885300da90] --&gt;&lt;div class="jive-rendered-content"&gt;&lt;p&gt;&lt;em&gt;Welcome to another installment of our JBoss editorial, but also our last on the jboss.org. Indeed, we&amp;#8217;ll be migrating the editorial to the Red Hat developer blog quite soon (as jboss.org is no longer hosting blogs). Don&amp;#8217;t worry, you won&amp;#8217;t even need to update your feed, we&amp;#8217;ll provide a redirect&amp;hellip; And now, to the news of the last two weeks&amp;hellip;&lt;/em&gt;&lt;/p&gt;&lt;h1&gt;&lt;/h1&gt;&lt;h1&gt;So long, jboss.org! Thanks for all the fish...&lt;/h1&gt;&lt;p&gt;As you may be already aware, this website will become readonly on the 3rd of March. That&amp;#8217;s why many projects have been moving their blog to a new location. That being said, don&amp;#8217;t worry, the editorial will carry on, simply on another platform. We&amp;#8217;ll provide redirect to play and I&amp;#8217;ll ensure a smooth transition for all our reader. (Feel free to &lt;a class="jive-link-email-small" href="mailto:belaran@redhat.com" rel="nofollow"&gt;ping me&lt;/a&gt; if you run into any trouble).&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h1&gt;Riding the (Apache) Camel (3)&lt;/h1&gt;&lt;p&gt;&lt;a href="https://2.bp.blogspot.com/-DkmhaDZFDwQ/Wqt37v7ZczI/AAAAAAAABmw/LNMUMUtZ9FcUrakjYSmT94kjmqG5MXrdwCLcBGAs/s1600/logo-medium-d.png"&gt;&lt;img alt="Apache Camel Logo" class="image-1 jive-image" src="https://2.bp.blogspot.com/-DkmhaDZFDwQ/Wqt37v7ZczI/AAAAAAAABmw/LNMUMUtZ9FcUrakjYSmT94kjmqG5MXrdwCLcBGAs/s1600/logo-medium-d.png" style="height: auto; display: block; margin-left: auto; margin-right: auto;"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;With the recent release of Camel 3, it&amp;#8217;s time to ride again the desert animal and explore its (newly) acquired features! Fortunately, Claus Ibsen has thought of that and he released a series of articles on Camel core optimization:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a class="jive-link-external-small" href="http://www.davsclaus.com/2020/01/apache-camel-31-more-camel-core.html" rel="nofollow"&gt;Apache Camel 3.1 - More camel-core optimizations coming&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class="jive-link-external-small" href="http://www.davsclaus.com/2020/01/apache-camel-31-more-camel-core_30.html" rel="nofollow"&gt;Apache Camel 3.1 - More camel-core optimizations coming (Part 2)&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class="jive-link-external-small" href="http://www.davsclaus.com/2020/02/apache-camel-31-more-camel-core.html" rel="nofollow"&gt;Apache Camel 3.1 - More camel-core optimizations coming (Part 3)&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Also, don't forget that &lt;a class="jive-link-external-small" href="https://camel.apache.org/camel-quarkus/latest/" rel="nofollow"&gt;Apache Camel is supported by Quarkus&lt;/a&gt;. Maybe a nice way to expore (or explore again) using Camel ?&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h1&gt;Techbytes&lt;/h1&gt;&lt;p style="font-size: 0.9rem; font-style: italic; text-align: center;"&gt;&lt;a href="https://farm1.staticflickr.com/29/46133650_c4649939b0_b.jpg"&gt;&lt;img alt="IMG_1322" height="15%" src="https://farm1.staticflickr.com/29/46133650_c4649939b0_b.jpg" style="display: block; margin-left: auto; margin-right: auto;" width="15%"/&gt;&lt;/a&gt;&lt;a class="jive-link-external-small" href="https://www.flickr.com/photos/83429360@N00/46133650" rel="nofollow"&gt;Image&lt;/a&gt;&lt;span&gt; by &lt;a class="jive-link-external-small" href="https://www.flickr.com/photos/83429360@N00" rel="nofollow"&gt;markwgallagher&lt;/a&gt;&lt;/span&gt; is licensed under &lt;a class="jive-link-external-small" href="https://creativecommons.org/licenses/by/2.0/?ref=ccsearch&amp;amp;atype=html" rel="nofollow"&gt;CC BY 2.0&lt;/a&gt;&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;If you are interested in process management with Drools and jBPM, we hope you have not missed this article on &lt;a class="jive-link-external-small" href="http://blog.athico.com/2020/02/pmml-revisited.html" rel="nofollow"&gt;Drools &amp;amp; jBPM: PMML revisited&lt;/a&gt;! Also, the last two weeks brought you a threat as you have an interesting two-parts article waiting for you :&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a class="jive-link-external-small" href="https://developers.redhat.com/blog/2020/02/19/designing-an-event-driven-business-process-at-scale-a-health-management-example-part-1/" rel="nofollow"&gt;Designing an event-driven business process at scale: A health management example, Part 1 - Red Hat Developer&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a class="jive-link-external-small" href="https://developers.redhat.com/blog/2020/02/20/designing-an-event-driven-process-at-scale-part-2/" rel="nofollow"&gt;Designing an event-driven process at scale: Part 2 - Red Hat Developer&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;It&amp;#8217;s no secret that handling &amp;hellip; secrets is one of the most challenging topics when it comes to software deployment. With that in mind, you&amp;#8217;ll love to learn more on &lt;a class="jive-link-external-small" href="https://developers.redhat.com/blog/2020/02/14/using-secrets-in-apache-kafka-connect-configuration/" rel="nofollow"&gt;Using secrets in Kafka Connect configuration&lt;/a&gt;.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h1&gt;Evangelist's Corner&lt;/h1&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;As always, our very own Eric D. Schabell has been quite productive in the last weeks. He released an article on &lt;a class="jive-link-external-small" href="https://www.schabell.org/2020/02/integrating-saas-applications-example-crm-integration.html" rel="nofollow"&gt;Integrating with SaaS Applications - Example CRM Integration&lt;/a&gt; along with a&lt;a class="jive-link-external-small" href="https://www.schabell.org/2020/02/beginners-guide-hr-rewards-process-automation-workshop.html" rel="nofollow"&gt; Beginners Guide - HR Employee Rewards Process Automation Workshop&lt;/a&gt; ! Have fun with those!&lt;/p&gt;&lt;h1&gt;&lt;/h1&gt;&lt;h1&gt;Releases, releases, releases...&lt;/h1&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;It would not be another week in JBoss without at least a pair of new releases :&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a class="jive-link-external-small" href="https://infinispan.org/blog/2020/02/10/2020-02-10-spring-boot-release-2.2.x/" rel="nofollow"&gt;Blog: Infinispan Spring Boot Starter released with Spring Boot 2.2.4.RELEASE - Infinispan&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class="jive-link-external-small" href="https://www.keycloak.org/2020/02/keycloak-900-released.html" rel="nofollow"&gt;Keycloak - Blog - Keycloak 9.0.0 released&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h1&gt;D&amp;eacute;caf'&lt;/h1&gt;&lt;p&gt;If you want to take a peek outside our usual Java world, you might find this article on &lt;a class="jive-link-external-small" href="https://developers.redhat.com/blog/2020/02/13/openshift-actions-deploy-to-red-hat-openshift-directly-from-your-github-repository/" rel="nofollow"&gt;OpenShift Actions: Deploy to Red Hat OpenShift directly from your GitHub repository&lt;/a&gt; quite compelling, but most importantly, quite useful if you deploy on OpenShift!&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;&lt;em&gt;That's all for another edition of the JBoss Editorial, please join us again for more exciting development from the JBoss Communities.&lt;/em&gt;&lt;/p&gt;&lt;/div&gt;&lt;!-- [DocumentBodyEnd:ad51e209-a314-4400-967d-ec885300da90] --&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/bU9__OGEtsQ" height="1" width="1" alt=""/&gt;</content><summary>Welcome to another installment of our JBoss editorial, but also our last on the jboss.org. Indeed, we’ll be migrating the editorial to the Red Hat developer blog quite soon (as jboss.org is no longer hosting blogs). Don’t worry, you won’t even need to update your feed, we’ll provide a redirect… And now, to the news of the last two weeks… So long, jboss.org! Thanks for all the fish... As you may be...</summary><dc:creator>Romain Pelisse</dc:creator><dc:date>2020-02-20T12:44:09Z</dc:date><feedburner:origLink>https://developer.jboss.org/blogs/weekly-editorial/2020/02/20/this-week-in-jboss-february-20-2020</feedburner:origLink></entry><entry><title>Infinispan Server configuration</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/fTmlZlbs-Lw/" /><category term="feed_group_name_infinispan" scheme="searchisko:content:tags" /><category term="feed_name_infinispan" scheme="searchisko:content:tags" /><category term="server" scheme="searchisko:content:tags" /><author><name>Tristan Tarrant</name></author><id>searchisko:content:id:jbossorg_blog-infinispan_server_configuration</id><updated>2020-02-20T14:28:06Z</updated><published>2020-02-20T12:00:00Z</published><content type="html">&lt;div id="preamble"&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The new Infinispan Server introduced in version 10.0 is quite different from the WildFly-based one we had up to 9.x. One of the big differences is that the new server’s configuration is just an extension of the embedded configuration.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The XML snippet below shows the configuration used by the server "out-of-the-box":&lt;/p&gt; &lt;/div&gt; &lt;div class="listingblock"&gt; &lt;div class="content"&gt; &lt;pre class="CodeRay highlight nowrap"&gt;&lt;code data-lang="xml"&gt;&lt;span class="tag"&gt;&amp;lt;infinispan&lt;/span&gt; &lt;span class="attribute-name"&gt;xmlns:xsi&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;http://www.w3.org/2001/XMLSchema-instance&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;xsi:schemaLocation&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;urn:infinispan:config:10.1 https://infinispan.org/schemas/infinispan-config-10.1.xsd&lt;/span&gt; &lt;span class="content"&gt;urn:infinispan:server:10.1 https://infinispan.org/schemas/infinispan-server-10.1.xsd&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;xmlns&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;urn:infinispan:config:10.1&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;xmlns:server&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;urn:infinispan:server:10.1&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;cache-container&lt;/span&gt; &lt;span class="attribute-name"&gt;name&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;default&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;statistics&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;true&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt; &lt;i class="conum" data-value="1"&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt; &lt;span class="tag"&gt;&amp;lt;transport&lt;/span&gt; &lt;span class="attribute-name"&gt;cluster&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;${infinispan.cluster.name}&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;stack&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;${infinispan.cluster.stack:tcp}&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;node-name&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;${infinispan.node.name:}&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;/&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;/cache-container&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;server&lt;/span&gt; &lt;span class="attribute-name"&gt;xmlns&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;urn:infinispan:server:10.1&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt; &lt;i class="conum" data-value="2"&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt; &lt;span class="tag"&gt;&amp;lt;interfaces&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;interface&lt;/span&gt; &lt;span class="attribute-name"&gt;name&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;public&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt; &lt;i class="conum" data-value="3"&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt; &lt;span class="tag"&gt;&amp;lt;inet-address&lt;/span&gt; &lt;span class="attribute-name"&gt;value&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;${infinispan.bind.address:127.0.0.1}&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;/&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;/interface&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;/interfaces&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;socket-bindings&lt;/span&gt; &lt;span class="attribute-name"&gt;default-interface&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;public&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;port-offset&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;${infinispan.socket.binding.port-offset:0}&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt; &lt;i class="conum" data-value="4"&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt; &lt;span class="tag"&gt;&amp;lt;socket-binding&lt;/span&gt; &lt;span class="attribute-name"&gt;name&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;default&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;port&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;${infinispan.bind.port:11222}&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;/&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;socket-binding&lt;/span&gt; &lt;span class="attribute-name"&gt;name&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;memcached&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;port&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;11221&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;/&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;/socket-bindings&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;security&amp;gt;&lt;/span&gt; &lt;i class="conum" data-value="5"&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt; &lt;span class="tag"&gt;&amp;lt;security-realms&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;security-realm&lt;/span&gt; &lt;span class="attribute-name"&gt;name&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;default&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt; &lt;span class="comment"&gt;&amp;lt;!-- Uncomment to enable TLS on the realm --&amp;gt;&lt;/span&gt; &lt;span class="comment"&gt;&amp;lt;!-- server-identities&amp;gt; &amp;lt;ssl&amp;gt; &amp;lt;keystore path="application.keystore" relative-to="infinispan.server.config.path" keystore-password="password" alias="server" key-password="password" generate-self-signed-certificate-host="localhost"/&amp;gt; &amp;lt;/ssl&amp;gt; &amp;lt;/server-identities--&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;properties-realm&lt;/span&gt; &lt;span class="attribute-name"&gt;groups-attribute&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;Roles&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;user-properties&lt;/span&gt; &lt;span class="attribute-name"&gt;path&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;users.properties&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;relative-to&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;infinispan.server.config.path&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;plain-text&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;true&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;/&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;group-properties&lt;/span&gt; &lt;span class="attribute-name"&gt;path&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;groups.properties&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;relative-to&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;infinispan.server.config.path&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="tag"&gt;/&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;/properties-realm&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;/security-realm&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;/security-realms&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;/security&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;endpoints&lt;/span&gt; &lt;span class="attribute-name"&gt;socket-binding&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;default&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;security-realm&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;default&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt; &lt;i class="conum" data-value="6"&gt;&lt;/i&gt;&lt;b&gt;(6)&lt;/b&gt; &lt;span class="tag"&gt;&amp;lt;hotrod-connector&lt;/span&gt; &lt;span class="attribute-name"&gt;name&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;hotrod&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;/&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;rest-connector&lt;/span&gt; &lt;span class="attribute-name"&gt;name&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;rest&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;/&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;/endpoints&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;/server&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;/infinispan&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Let’s have a look at the various elements, describing their purposes:&lt;/p&gt; &lt;/div&gt; &lt;div class="colist arabic"&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt;&lt;i class="conum" data-value="1"&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt; &lt;td&gt;The &lt;code&gt;cache-container&lt;/code&gt; element is a standard Infinispan cache manager configuration like you’d use in embedded deployments. You can decide to leave it empty and create any caches at runtime using the CLI, Console or Hot Rod and RESTful APIs, or statically predefine your caches here.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;i class="conum" data-value="2"&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt; &lt;td&gt;The &lt;code&gt;server&lt;/code&gt; element holds the server-specific configuration which includes network, security and protocols.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;i class="conum" data-value="3"&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt; &lt;td&gt;The &lt;code&gt;interface&lt;/code&gt; element declares named interfaces which are associated with specific addresses/interfaces. The default &lt;code&gt;public&lt;/code&gt; interface will use the loopback address &lt;code&gt;127.0.0.1&lt;/code&gt; unless overridden with the &lt;code&gt;-b&lt;/code&gt; switch or the &lt;code&gt;infinispan.bind.address&lt;/code&gt; system property. Refer to &lt;a href="https://infinispan.org/docs/stable/titles/server/server.html#server_interfaces-server"&gt;server interfaces&lt;/a&gt; documentation for a detailed list of all possible ways of selecting an address.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;i class="conum" data-value="4"&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt; &lt;td&gt;The &lt;code&gt;socket-bindings&lt;/code&gt; element associates addresses and ports with unique names you can use later on configuring the protocol endpoints. For convenience, a &lt;em&gt;port offset&lt;/em&gt; can be added to all port numbers to ease starting multiple servers on the same host. Use the &lt;code&gt;-o&lt;/code&gt; switch or the &lt;code&gt;infinispan.socket.binding.port-offset&lt;/code&gt; system property to change the offset.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;i class="conum" data-value="5"&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt; &lt;td&gt;The &lt;code&gt;security&lt;/code&gt; element configures the server’s realms and identities. We will ignore this for now as this deserves its own dedicated blog post in the near future.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;i class="conum" data-value="6"&gt;&lt;/i&gt;&lt;b&gt;6&lt;/b&gt;&lt;/td&gt; &lt;td&gt;The &lt;code&gt;endpoints&lt;/code&gt; element configures the various protocol servers. Unless overridden, all sub protocols are aggregated into a &lt;em&gt;single-port&lt;/em&gt; endpoint which, as its name suggests, listens on a single port and automatically detects the incoming protocol, delegating to the appropriate handler.&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The &lt;code&gt;rest-connector&lt;/code&gt; has a special role in the new server, since it now also handles administrative tasks. It is therefore required if you want to use the CLI or the Console. You may wish to have the protocols listen on different ports, as outlined in the configuration below:&lt;/p&gt; &lt;/div&gt; &lt;div class="listingblock"&gt; &lt;div class="content"&gt; &lt;pre class="CodeRay highlight nowrap"&gt;&lt;code data-lang="xml"&gt;&lt;span class="tag"&gt;&amp;lt;infinispan&lt;/span&gt; &lt;span class="attribute-name"&gt;xmlns:xsi&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;http://www.w3.org/2001/XMLSchema-instance&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;xsi:schemaLocation&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;urn:infinispan:config:10.1 https://infinispan.org/schemas/infinispan-config-10.1.xsd&lt;/span&gt; &lt;span class="content"&gt;urn:infinispan:server:10.1 https://infinispan.org/schemas/infinispan-server-10.1.xsd&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;xmlns&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;urn:infinispan:config:10.1&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;xmlns:server&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;urn:infinispan:server:10.1&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;cache-container&lt;/span&gt; &lt;span class="attribute-name"&gt;name&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;default&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;statistics&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;true&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;transport&lt;/span&gt; &lt;span class="attribute-name"&gt;cluster&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;${infinispan.cluster.name}&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;stack&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;${infinispan.cluster.stack:tcp}&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;node-name&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;${infinispan.node.name:}&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;/&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;/cache-container&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;server&lt;/span&gt; &lt;span class="attribute-name"&gt;xmlns&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;urn:infinispan:server:10.1&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;interfaces&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;interface&lt;/span&gt; &lt;span class="attribute-name"&gt;name&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;public&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;match-interface&lt;/span&gt; &lt;span class="attribute-name"&gt;value&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;eth0&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;/&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;/interface&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;interface&lt;/span&gt; &lt;span class="attribute-name"&gt;name&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;admin&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;loopback&lt;/span&gt;&lt;span class="tag"&gt;/&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;/interface&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;/interfaces&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;socket-bindings&lt;/span&gt; &lt;span class="attribute-name"&gt;default-interface&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;public&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;port-offset&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;${infinispan.socket.binding.port-offset:0}&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;socket-binding&lt;/span&gt; &lt;span class="attribute-name"&gt;name&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;public&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;port&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;${infinispan.bind.port:11222}&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;/&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;socket-binding&lt;/span&gt; &lt;span class="attribute-name"&gt;name&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;admin&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;interface&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;admin&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;port&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;${infinispan.bind.port:11222}&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;/&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;/socket-bindings&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;security&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;security-realms&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;security-realm&lt;/span&gt; &lt;span class="attribute-name"&gt;name&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;default&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;properties-realm&lt;/span&gt; &lt;span class="attribute-name"&gt;groups-attribute&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;Roles&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;user-properties&lt;/span&gt; &lt;span class="attribute-name"&gt;path&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;users.properties&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;relative-to&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;infinispan.server.config.path&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;plain-text&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;true&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;/&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;group-properties&lt;/span&gt; &lt;span class="attribute-name"&gt;path&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;groups.properties&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;relative-to&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;infinispan.server.config.path&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="tag"&gt;/&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;/properties-realm&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;/security-realm&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;/security-realms&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;/security&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;endpoints&lt;/span&gt; &lt;span class="attribute-name"&gt;socket-binding&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;admin&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;security-realm&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;default&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;hotrod-connector&lt;/span&gt; &lt;span class="attribute-name"&gt;name&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;hotrod&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;socket-binding&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;public&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;/&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;rest-connector&lt;/span&gt; &lt;span class="attribute-name"&gt;name&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;rest&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;/&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;/endpoints&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;/server&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;/infinispan&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;This creates two &lt;em&gt;socket bindings&lt;/em&gt;, one named &lt;strong&gt;public&lt;/strong&gt; bound to the &lt;code&gt;eth0&lt;/code&gt; interface and one named &lt;strong&gt;admin&lt;/strong&gt; bound to the loopback interface. The server will therefore listen for Hot Rod traffic only on the &lt;strong&gt;public&lt;/strong&gt; network and for HTTP/REST traffic on the &lt;strong&gt;admin&lt;/strong&gt; network.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;For more details on how to configure Infinispan Server, refer to our &lt;a href="https://infinispan.org/docs/stable/titles/server/server.html"&gt;documentation&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;In the next blog post we will have an in-depth look at security.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/fTmlZlbs-Lw" height="1" width="1" alt=""/&gt;</content><summary>The new Infinispan Server introduced in version 10.0 is quite different from the WildFly-based one we had up to 9.x. One of the big differences is that the new server’s configuration is just an extension of the embedded configuration. The XML snippet below shows the configuration used by the server "out-of-the-box": xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" ...</summary><dc:creator>Tristan Tarrant</dc:creator><dc:date>2020-02-20T12:00:00Z</dc:date><feedburner:origLink>http://infinispan.org/blog/2020/02/20/2020-02-20-server-config/</feedburner:origLink></entry><entry><title>PMML revisited</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/XTEVuDaK1yQ/pmml-revisited.html" /><category term="feed_group_name_drools" scheme="searchisko:content:tags" /><category term="feed_name_drools" scheme="searchisko:content:tags" /><author><name>Gabriele Cardosi</name></author><id>searchisko:content:id:jbossorg_blog-pmml_revisited</id><updated>2020-02-20T09:46:31Z</updated><published>2020-02-20T09:46:00Z</published><content type="html">Hi folks! The beginning of this year brings with it the initiative to re-design the Drools PMML module.&lt;br /&gt;In this post I will describe how we are going to approach it, what's the current status, ideas for future development, etc. etc so... stay tuned!&lt;br /&gt;&lt;h2&gt;&lt;/h2&gt;&lt;h2&gt;Background&lt;/h2&gt;&lt;a href="https://en.wikipedia.org/wiki/Predictive_Model_Markup_Language" rel="noopener" target="_blank"&gt;PMML&lt;/a&gt; is a standard whose aim is to "&lt;em&gt;provide a way for analytic applications to describe and exchange predictive models produced by data mining and machine learning algorithms.&lt;/em&gt;" &lt;a href="http://dmg.org/pmml/v4-4/GeneralStructure.html" rel="noopener" target="_blank"&gt;PMML standard&lt;/a&gt; defines a series of models that are managed, and we will refer to them as "Model".&lt;br /&gt;The maybe-not so obvious consequence of this is that, said differently, PMML may be thought as an &lt;i&gt;orchestrator&lt;/i&gt; of different predictive models, each of which with different requirements.&lt;br /&gt;Drools has its own PMML implementation. The original design of it was 100% drools-engine based, but in the long term this proved to be not so satisfactory for all the models, so a decision has taken to implement a new version with a different approach. And here the current story begin...&lt;br /&gt;&lt;h2&gt;Requirements&lt;/h2&gt;To the bare-bone essence, what a PMML implementation should allow is to:&lt;br /&gt;&lt;ol&gt;&lt;li&gt;load a PMML file (xml format)&lt;/li&gt;&lt;li&gt;submit input data to it&lt;/li&gt;&lt;li&gt;returns predicted values&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;Sounds simple, doesn't it?&amp;nbsp;&lt;/div&gt;&lt;h2&gt;Approach&lt;/h2&gt;The proposed architecture aims at fulfilling the requirements in a modular way, following &lt;a href="https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html"&gt;“Clean Architecture”&lt;/a&gt; principles.&lt;br /&gt;To achieve that, components are defined with clear boundaries and visibility.&lt;br /&gt;General idea is that there are specific tasks strictly related to the core functionality that should be kept agnostic by other “outer” features.&lt;br /&gt;Whoever wanting to deep delve in the matter may read the book "Clean Architecture" by R. C. Martin, but in the essence it is just a matter to apply good-ol' design principles to the overall architecture.&lt;br /&gt;With this target clearly defined, the steps required to achieve it are:&lt;br /&gt;&lt;ol&gt;&lt;li&gt;identify the core-logic and the implementation details (model-specific)&lt;/li&gt;&lt;li&gt;implement the core-logic inside "independent" modules&lt;/li&gt;&lt;li&gt;write code for the model-specific modules&lt;/li&gt;&lt;/ol&gt;We choose to implement a &lt;a href="https://martinfowler.com/eaaCatalog/plugin.html" rel="noopener" target="_blank"&gt;plugin pattern&amp;nbsp;&lt;/a&gt; to bind the core-logic to the model-specific implementations mostly for two reasons:&lt;br /&gt;&lt;ol&gt;&lt;li&gt;incremental development and overall code-management: the core module itself does not depend on any of the model-specific implementations, so the latter may be provided/updated/replaced incrementally without any impact on the core&lt;/li&gt;&lt;li&gt;possibility to replace the provided implementation with a custom one&lt;/li&gt;&lt;li&gt;we also foresee the possibility to choose an implementation at runtime, depending on the original PMML structure (e.g. it may make sense to use a different implementation depending on the size of the given PMML)&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;(I cheated: those are three)&amp;nbsp;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;h2&gt;&lt;b&gt;Models&lt;/b&gt;&lt;/h2&gt;&lt;h4&gt;&lt;b&gt;KiePMMLModel&lt;/b&gt;&lt;/h4&gt;&lt;ol&gt;&lt;li&gt;This is the definition of Kie-representation of the original PMML model.&lt;/li&gt;&lt;li&gt;For every actual model there is a specific implementation, and it may be any kind of object (java map, drools rule, etc).&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;Could we avoid it? Maybe. We could use the model directly generated by the specification' xsd. But this has been designed to describe &lt;i&gt;all&lt;/i&gt; the predictive models, while any of them may use it in different way and with different convention; so this&amp;nbsp;&lt;i&gt;internal view&lt;/i&gt; will represent exactly what is needed for each specific model.&lt;/div&gt;&lt;h4&gt;Components&lt;/h4&gt;We identified the following main functional components:&lt;br /&gt;&lt;ol&gt;&lt;li&gt;Compiler&lt;/li&gt;&lt;li&gt;Assembler&lt;/li&gt;&lt;li&gt;Executor&lt;/li&gt;&lt;/ol&gt;&lt;h4&gt;Compiler&lt;/h4&gt;This component read the original PMML file and traslate it to our internal format.&lt;br /&gt;The core-side of it simply unmarshall the xml data into Java object. Then, it uses java SPI to retrieve the model-compiler specific for the given PMML model (if it does not find one, the PMML is simply ignored).&lt;br /&gt;Last, the retrieved model-compiler will “translate” the original PMML model to our model-specific representation (&lt;em&gt;KiePMMLModels&lt;/em&gt;).&lt;br /&gt;The &lt;em&gt;core-side&lt;/em&gt; part of this component has no direct dependence on any specific &lt;i&gt;Model Compiler implementation&lt;/i&gt; and not even with anything drools/kie related - so basically it is a lightweight/standalone library.&lt;br /&gt;This component may be invoked at &lt;em&gt;runtime &lt;/em&gt;(i.e. during the execution of the customer project), if its execution is not time-consuming, or during the compilation of the kjar (e.g. for drools-implemented models).&lt;br /&gt;&lt;h4&gt;Assembler&lt;/h4&gt;This component stores &lt;em&gt;KiePMMLModels&lt;/em&gt; created by the &lt;i&gt;Compiler&lt;/i&gt; inside KIE knowledge base. None of the other components should have any dependency/knowledge of this one.&lt;br /&gt;In turns, it must not have any dependency/knowledge/reference on actual &lt;i&gt;Model Compiler implementations.&lt;/i&gt;&lt;br /&gt;&lt;h4&gt;&lt;b&gt;Executor&lt;/b&gt;&lt;/h4&gt;This component is responsible for actual execution of PMML models. It receives the PMML input data, retrieves the KiePMMLModel specific for the input data and calculates the output.&lt;br /&gt;For each model there will be a specific “executor”, to allow different kinds of execution implementation (drools, external library, etc) depending on the model type.&lt;br /&gt;The core-side of it simply receives the input data and retrieve the model-executor specific for the given PMML model (if it does not find one, the PMML is simply ignored).&lt;br /&gt;Last, the retrieved model-executor will evaluate the prediction based on the input data.&lt;br /&gt;The &lt;em&gt;core-side&lt;/em&gt; part of this component has no direct dependence on any specific &lt;i&gt;Model Executor implementation,&lt;/i&gt; but of course is strictly dependent on the drool runtime.&lt;br /&gt;&lt;br /&gt;&lt;table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="text-align: center;"&gt;&lt;img alt="CleanPMMLArchitecture" class="alignnone wp-image-703" height="632" src="https://blogtechcardosi.files.wordpress.com/2020/02/cleanpmmlarchitecture.png" style="margin-left: auto; margin-right: auto;" width="632" /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;Overall Architecture&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br /&gt;&lt;br /&gt;&lt;h2&gt;Model implementations&lt;/h2&gt;&lt;h3&gt;Drools-based models&lt;/h3&gt;&lt;div&gt;Some models will delegate to the drools-engine to allow best performance under heavy load. Here are some details about general scheme for such implementations.&lt;/div&gt;&lt;div&gt;&lt;ol&gt;&lt;li&gt;the &lt;i&gt;compiler&lt;/i&gt;&amp;nbsp;is invoked at kjar generation (or during runtime for hot-loading of PMML file)&lt;/li&gt;&lt;li&gt;the &lt;i&gt;compiler&lt;/i&gt; reads the PMML file and transform it to "descr" object (see&amp;nbsp;&lt;a href="https://github.com/kiegroup/drools/blob/master/drools-compiler/src/main/java/org/drools/compiler/lang/descr/BaseDescr.java" rel="noopener" target="_blank"&gt;BaseDescr&lt;/a&gt;,&amp;nbsp;&lt;a href="https://github.com/kiegroup/drools/blob/master/drools-compiler/src/main/java/org/drools/compiler/lang/api/DescrFactory.java" rel="noopener" target="_blank"&gt;DescrFactory&lt;/a&gt;,&amp;nbsp;&lt;a href="https://github.com/kiegroup/drools/blob/master/drools-compiler/src/test/java/org/drools/compiler/lang/api/DescrBuilderTest.java" rel="noopener" target="_blank"&gt;DescrBuilderTest&lt;/a&gt;)&lt;/li&gt;&lt;li&gt;regardless of how the &lt;i&gt;model-compiler&lt;/i&gt; is invoked, the &lt;i&gt;drools compiler&lt;/i&gt; must be invoked soon after it to have java-class generated based on the&amp;nbsp;&lt;em&gt;descr&lt;/em&gt;&amp;nbsp;object&lt;/li&gt;&lt;li&gt;the &lt;i&gt;assembler&lt;/i&gt; put the generated classes in the kie base&lt;/li&gt;&lt;li&gt;the &lt;i&gt;executor&lt;/i&gt; loads the "drools-model" generated and invoke it with the input parameters&lt;/li&gt;&lt;/ol&gt;&lt;h4&gt;DRL details&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;for each field in the DataDictionary, a specific DataType has to be defined&lt;/li&gt;&lt;li&gt;for each branch/leaf of the tree, a full-path rule has to be generated (i.e. a rule with the path to get to it - e.g. "sunny", "sunny_temperature", "sunny_temperature_humidity")&lt;/li&gt;&lt;li&gt;a "status-holder" object is created and contains the value of the rule fired - changing that value will fire the children branch/leaf rules matching it (e.g. the rule "sunny" will fire "sunny_temperature" that - in turns - will fire "sunny_temperature_humidity")&lt;/li&gt;&lt;li&gt;such "status-holder"&amp;nbsp;&lt;em&gt;may&lt;/em&gt;&amp;nbsp;contain informations/partial result of evaluation, to be eventually used where combination of results is needed&lt;/li&gt;&lt;li&gt;missing value strategy&amp;nbsp;&lt;em&gt;may&lt;/em&gt;&amp;nbsp;be implemented inside the status holder or as exploded rules&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;Testing&lt;/h3&gt;&lt;div&gt;For each model there will be a set of standard unit tests to mostly verify &amp;nbsp;individual units of code. Beside that, inside the model-specific module (yes, it &lt;b&gt;is&lt;/b&gt; a tongue twister) there will be an &lt;i&gt;integration-test &lt;/i&gt;submodule. This latter will verify the overall correct execution of different, more or less complex,&amp;nbsp;PMML files, to simulate as much as possible what may happen in real-world scenarios.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;Regression&lt;/h3&gt;Regression model is the first one to&amp;nbsp;have been implemented. Due to its inherent simplicity, we choose to provide a pure java-based implementation for it. For the moment being it is still under PR, and new full tests are being added.&lt;br /&gt;&lt;h3&gt;Tree&lt;/h3&gt;After evaluating all the pros/cons, we decided that this model could be a good candidate to be implemented with a drools-based approach. Being also a simple model to follow, we choose to use it as first test for drools approach.&lt;br /&gt;&lt;br /&gt;&lt;h2&gt;TO-DOs&lt;/h2&gt;This is a list of missing features that are not implemented, yet, and not strictly-related to a specific model. It will be (well, it should be) updated during the development:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Setup &lt;i&gt;Benchmarking&lt;/i&gt; skeleton project (see&amp;nbsp; &lt;a href="https://github.com/kiegroup/kie-benchmarks/tree/master/drools-benchmarks" target="_blank"&gt;Drools Benchmark&lt;/a&gt;)&lt;/li&gt;&lt;li&gt;Manage &lt;i&gt;Extension&lt;/i&gt; tags (see &lt;a href="http://dmg.org/pmml/v4-4/GeneralStructure.html#xsdElement_Extension" target="_blank"&gt;xsdElement_Extension&lt;/a&gt;)&lt;/li&gt;&lt;li&gt;Manage &lt;i&gt;SimpleSetPredicate&lt;/i&gt;&amp;nbsp;tags (see &lt;a href="http://dmg.org/pmml/v4-4/TreeModel.html#xsdElement_SimplePredicate" target="_blank"&gt;SimpleSetPredicate&lt;/a&gt;)&lt;/li&gt;&lt;li&gt;Implement &lt;a href="http://dmg.org/pmml/v4-4/MultipleModels.html#xsdElement_VariableWeight" target="_blank"&gt;VariableWeight&lt;/a&gt;&amp;nbsp;inside &lt;i&gt;Segment&lt;/i&gt;&amp;nbsp;(dynamic alternative to static "weight" value)&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Needless to say that any comment (especially nice ones) and suggestion will be greatly appreciated.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Come back in the following days and see what's next!&amp;nbsp;&lt;/div&gt;&lt;div&gt;Bye!&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.athico.com/~ff/DroolsAtom?a=hm7B40DidXY:G3VV2tAqMp4:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/DroolsAtom?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.athico.com/~ff/DroolsAtom?a=hm7B40DidXY:G3VV2tAqMp4:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/DroolsAtom?i=hm7B40DidXY:G3VV2tAqMp4:gIN9vFwOqvQ" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.athico.com/~ff/DroolsAtom?a=hm7B40DidXY:G3VV2tAqMp4:dnMXMwOfBR0"&gt;&lt;img src="http://feeds.feedburner.com/~ff/DroolsAtom?d=dnMXMwOfBR0" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.athico.com/~ff/DroolsAtom?a=hm7B40DidXY:G3VV2tAqMp4:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/DroolsAtom?i=hm7B40DidXY:G3VV2tAqMp4:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.athico.com/~ff/DroolsAtom?a=hm7B40DidXY:G3VV2tAqMp4:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/DroolsAtom?i=hm7B40DidXY:G3VV2tAqMp4:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.athico.com/~ff/DroolsAtom?a=hm7B40DidXY:G3VV2tAqMp4:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/DroolsAtom?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.athico.com/~ff/DroolsAtom?a=hm7B40DidXY:G3VV2tAqMp4:jWeZv7XsJd0"&gt;&lt;img src="http://feeds.feedburner.com/~ff/DroolsAtom?d=jWeZv7XsJd0" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/DroolsAtom/~4/hm7B40DidXY" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/XTEVuDaK1yQ" height="1" width="1" alt=""/&gt;</content><summary>Hi folks! The beginning of this year brings with it the initiative to re-design the Drools PMML module. In this post I will describe how we are going to approach it, what's the current status, ideas for future development, etc. etc so... stay tuned! BackgroundPMML is a standard whose aim is to "provide a way for analytic applications to describe and exchange predictive models produced by data mini...</summary><dc:creator>Gabriele Cardosi</dc:creator><dc:date>2020-02-20T09:46:00Z</dc:date><feedburner:origLink>http://feeds.athico.com/~r/DroolsAtom/~3/hm7B40DidXY/pmml-revisited.html</feedburner:origLink></entry><entry><title>Designing an event-driven process at scale: Part 2</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/SwLTai92w4I/" /><category term="Event-Driven" /><category term="Java" /><category term="Modern App Dev" /><category term="business process management" /><category term="Design Patterns" /><category term="health management" /><category term="jBPM" /><category term="task implementation" /><author><name>mcarioli</name></author><id>https://developers.redhat.com/blog/?p=685907</id><updated>2020-02-20T08:00:31Z</updated><published>2020-02-20T08:00:31Z</published><content type="html">&lt;p&gt;In the first article in this series, &lt;a href="https://developers.redhat.com/blog/2020/02/19/designing-an-event-driven-business-process-at-scale-a-health-management-example-part-1/"&gt;&lt;em&gt;Designing an event-driven business process at scale: A health management example, Part 1&lt;/em&gt;&lt;/a&gt;, we began by defining the business use case and data model for a concrete example from the health management industry. We then began implementing the example in &lt;a href="https://www.jbpm.org/" target="_blank" rel="noopener noreferrer"&gt;jBPM&lt;/a&gt; (an open source business automation suite) by creating our trigger process.&lt;/p&gt; &lt;p&gt;Now, in the second article in this series, we will focus on creating the Task subprocess and its many components. In our case, these are:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;The Expired? gate&lt;/li&gt; &lt;li&gt;The Suppressed? gate&lt;/li&gt; &lt;li&gt;The human task&lt;/li&gt; &lt;li&gt;The Reminder subprocess&lt;/li&gt; &lt;li&gt;The &amp;#8220;What type of close?&amp;#8221; gate&lt;/li&gt; &lt;li&gt;The Hard Close embedded subprocess&lt;/li&gt; &lt;li&gt;The Escalation subprocess&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;span id="more-685907"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;The Task subprocess&lt;/h2&gt; &lt;p&gt;Now you can create the Task subprocess with the properties shown in Figure 1.&lt;/p&gt; &lt;div id="attachment_684737" style="width: 448px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-684737" class="wp-image-684737 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-A490-1.png" alt="jBPM Diagram properties section, Process subsection" width="438" height="584" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-A490-1.png 438w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-A490-1-225x300.png 225w" sizes="(max-width: 438px) 100vw, 438px" /&gt;&lt;p id="caption-attachment-684737" class="wp-caption-text"&gt;Figure 1: Create the Task subprocess.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;The Task subprocess needs the variables shown in Figure 2 to be defined.&lt;/p&gt; &lt;div id="attachment_685337" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-685337" class="wp-image-685337" src="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-0001.jpg" alt="jBPM Process Data section, defining process variables" width="640" height="274" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-0001.jpg 889w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-0001-300x128.jpg 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-0001-768x328.jpg 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-685337" class="wp-caption-text"&gt;Figure 2: Define the variables for your Task subprocess.&lt;/p&gt;&lt;/div&gt; &lt;p style="padding-left: 40px;"&gt;&lt;strong&gt;Note:&lt;/strong&gt; The type &lt;code&gt;com.jbpm.document.Document&lt;/code&gt; of the variable &lt;code&gt;sSupplementalData&lt;/code&gt; is available out of the box.&lt;/p&gt; &lt;p&gt;Now, draw the diagram for the Task subprocess, as shown in Figure 3.&lt;/p&gt; &lt;div id="attachment_685367" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-685367" class="wp-image-685367 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Fig-210.png" alt="the task subprocess diagram in jBPM" width="640" height="280" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Fig-210.png 640w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Fig-210-300x131.png 300w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-685367" class="wp-caption-text"&gt;Figure 3: Create your Task subprocess diagram.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Once the process variables are initialized in a script task, a &lt;a href="https://docs.jboss.org/jbpm/release/latest/jbpm-docs/html_single/#_user_task" target="_blank" rel="noopener noreferrer"&gt;user task&lt;/a&gt; must be completed. A reminder is set for the completion of the user task and an escalation is defined. Both the reminder and the escalation are implemented with &lt;a href="https://docs.jboss.org/jbpm/release/latest/jbpm-docs/html_single/#_timers" target="_blank" rel="noopener noreferrer"&gt;timers&lt;/a&gt; that lead to subprocesses that you need to implement. See below for a &lt;a href="https://maucarba.blogspot.com/2019/12/process-management-or-case-management.html#ConsiderationsWhenUsingTimers"&gt;note concerning timers from a scalability perspective&lt;/a&gt;.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;strong&gt;Note:&lt;/strong&gt; We implemented the task suppression requirement using a timer as well.&lt;/p&gt; &lt;p&gt;The hard close requirement is realized as an embedded subprocess that is simply catching a signal. Following the requirements, the escalation occurs due to a timer on this subprocess.&lt;/p&gt; &lt;h3&gt;The Expired? gate&lt;/h3&gt; &lt;p&gt;The Expired? exclusive gate should have two branches configured using the &lt;code&gt;expirationDate&lt;/code&gt; attribute of the Task class, as shown in Figure 4.&lt;/p&gt; &lt;div id="attachment_685387" style="width: 239px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-685387" class="wp-image-685387 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Fig-211.png" alt="jBPM diagram showing the expired gate in place" width="229" height="301" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Fig-211.png 229w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Fig-211-228x300.png 228w" sizes="(max-width: 229px) 100vw, 229px" /&gt;&lt;p id="caption-attachment-685387" class="wp-caption-text"&gt;Figure 4: Checking if the task is expired.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;To configure the Yes branch, set up the condition expressions shown in Figure 5.&lt;/p&gt; &lt;div id="attachment_685397" style="width: 429px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-685397" class="wp-image-685397 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Fig-212.png" alt="jBPM settings for what to do if the task is expired." width="419" height="272" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Fig-212.png 419w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Fig-212-300x195.png 300w" sizes="(max-width: 419px) 100vw, 419px" /&gt;&lt;p id="caption-attachment-685397" class="wp-caption-text"&gt;Figure 5: Defining the behavior if your task is expired.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;The Suppressed? gate&lt;/h3&gt; &lt;p&gt;The Suppressed? exclusive gate&amp;#8217;s two branches should be configured using the &lt;code&gt;suppressed&lt;/code&gt; boolean attribute of the Task class, as shown in Figure 6.&lt;/p&gt; &lt;div id="attachment_685547" style="width: 306px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-685547" class="wp-image-685547 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/02/2019-12-19_11-49-17-Fig-1.png" alt="" width="296" height="291" /&gt;&lt;p id="caption-attachment-685547" class="wp-caption-text"&gt;Figure 6: Defining behavior depending on whether or not your task needs to be suppressed.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Figure 7 shows the configuration for the Yes branch.&lt;/p&gt; &lt;div id="attachment_685557" style="width: 295px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-685557" class="wp-image-685557 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Fig-213.png" alt="jBPM configuration for suppressing a task" width="285" height="327" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Fig-213.png 285w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Fig-213-261x300.png 261w" sizes="(max-width: 285px) 100vw, 285px" /&gt;&lt;p id="caption-attachment-685557" class="wp-caption-text"&gt;Figure 7: Entering the Yes branch.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;The suppression of the task is accomplished by a timer. The timer causes the process to wait for the period specified in the Task object&amp;#8217;s &lt;code&gt;suppressionPeriod&lt;/code&gt; attribute, as shown in Figure 8.&lt;/p&gt; &lt;div id="attachment_685567" style="width: 290px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-685567" class="wp-image-685567 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Fig-214.png" alt="" width="280" height="263" /&gt;&lt;p id="caption-attachment-685567" class="wp-caption-text"&gt;Figure 8: Defining the suppression timer.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;The human task&lt;/h3&gt; &lt;p&gt;Now, let&amp;#8217;s focus on the human task, as shown in Figure 9.&lt;/p&gt; &lt;div id="attachment_686037" style="width: 512px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-686037" class="wp-image-686037 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/02/2019-12-19_11-58-37-Fig-2.png" alt="Workflow diagram focused on the human task" width="502" height="568" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/02/2019-12-19_11-58-37-Fig-2.png 502w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/2019-12-19_11-58-37-Fig-2-265x300.png 265w" sizes="(max-width: 502px) 100vw, 502px" /&gt;&lt;p id="caption-attachment-686037" class="wp-caption-text"&gt;Figure 9: Defining the human task.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Configure the human task using the settings shown in Figure 10.&lt;/p&gt; &lt;div id="attachment_686047" style="width: 432px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-686047" class="wp-image-686047 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Task-1.png" alt="jBPM showing task actor setup" width="422" height="703" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Task-1.png 422w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Task-1-180x300.png 180w" sizes="(max-width: 422px) 100vw, 422px" /&gt;&lt;p id="caption-attachment-686047" class="wp-caption-text"&gt;Figure 10: Implementing the human (actor) task.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;The task actor is resolved from the task actor assignment process variable.&lt;/p&gt; &lt;p&gt;Next, there are a couple of abilities you will want: To capture text as well as supplemental uploaded documentation and to complete the task with a Not Applicable or Not Available response. These requirements can be satisfied by configuring the task parameters as you see in Figure 11.&lt;/p&gt; &lt;div id="attachment_686077" style="width: 606px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-686077" class="wp-image-686077 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Task-2.png" alt="JBPM Data Outputs and Assignments section filled in for this task." width="596" height="376" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Task-2.png 596w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Task-2-300x189.png 300w" sizes="(max-width: 596px) 100vw, 596px" /&gt;&lt;p id="caption-attachment-686077" class="wp-caption-text"&gt;Figure 11: Defining the task&amp;#8217;s parameters to capture the types of data you need.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;You also need to satisfy the requirement of sending a periodic reminder to the task actor. There is a built-in &lt;a href="https://docs.jboss.org/jbpm/release/latest/jbpm-docs/html_single/#_email_notifications" target="_blank" rel="noopener noreferrer"&gt;notification capability in jBPM&lt;/a&gt; that allows sending email to notify groups and individuals to complete a task. For example, you could configure notifications for the Task activity as you see in Figure 12.&lt;/p&gt; &lt;div&gt; &lt;div id="attachment_686107" style="width: 542px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-686107" class="wp-image-686107 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-0003.png" alt="jBPM Notification configuration for task state type not completed." width="532" height="664" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-0003.png 532w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-0003-240x300.png 240w" sizes="(max-width: 532px) 100vw, 532px" /&gt;&lt;p id="caption-attachment-686107" class="wp-caption-text"&gt;Figure 12: Reminding your humans to complete their tasks.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;In many cases, the built-in notification capability may be adequate. However, there are cases where one would need more control over the notification process. The advantage of using timers for this purpose allows you to design as complex a reminder process as you want. In this example, you will implement timer-based reminders.Configure the timer on the task border, which will trigger the first reminder after the period of time defined in the &lt;code&gt;reminderInitiation&lt;/code&gt; attribute of the &lt;code&gt;Task&lt;/code&gt; object as shown in Figure 13.&lt;/p&gt; &lt;div id="attachment_686127" style="width: 357px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-686127" class="wp-image-686127 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Fig-100.png" alt="jBPM implementing the first task reminder" width="347" height="327" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Fig-100.png 347w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Fig-100-300x283.png 300w" sizes="(max-width: 347px) 100vw, 347px" /&gt;&lt;p id="caption-attachment-686127" class="wp-caption-text"&gt;Figure 13: Triggering the first reminder.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;The Reminder subprocess&lt;/h3&gt; &lt;p&gt;Now you should configure the subprocess &lt;code&gt;Reminder&lt;/code&gt;, as shown in Figure 14.&lt;/p&gt; &lt;div id="attachment_686147" style="width: 446px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-686147" class="wp-image-686147 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Reminder-1.png" alt="jBPM creating the Reminder subprocess" width="436" height="597" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Reminder-1.png 436w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Reminder-1-219x300.png 219w" sizes="(max-width: 436px) 100vw, 436px" /&gt;&lt;p id="caption-attachment-686147" class="wp-caption-text"&gt;Figure 14: Creating the &lt;code&gt;Reminder&lt;/code&gt; subprocess.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Set the subprocess parameters to be the &lt;code&gt;Reminder&lt;/code&gt; and &lt;code&gt;Task&lt;/code&gt; objects, as shown in Figure 15.&lt;/p&gt; &lt;div id="attachment_686157" style="width: 606px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-686157" class="wp-image-686157 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Reminder-2.png" alt="jBPM setting up the subprocess's data" width="596" height="312" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Reminder-2.png 596w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Reminder-2-300x157.png 300w" sizes="(max-width: 596px) 100vw, 596px" /&gt;&lt;p id="caption-attachment-686157" class="wp-caption-text"&gt;Figure 15: Configuring the subprocess.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;After completion of the task, a signal should be sent to stop the reminder subprocess, as shown in Figure 16.&lt;/p&gt; &lt;div id="attachment_686167" style="width: 327px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-686167" class="wp-image-686167 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Fig-3.png" alt="jBPM creating a signal that will stop a project." width="317" height="215" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Fig-3.png 317w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Fig-3-300x203.png 300w" sizes="(max-width: 317px) 100vw, 317px" /&gt;&lt;p id="caption-attachment-686167" class="wp-caption-text"&gt;Figure 16: Creating the stop signal.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;The &amp;#8220;What type of close?&amp;#8221; gate&lt;/h3&gt; &lt;p&gt;An exclusive gate decides if the task close state should be soft or hard. The soft close branch of the gate looks like what you see in Figure 17.&lt;/p&gt; &lt;div id="attachment_686187" style="width: 321px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-686187" class="wp-image-686187 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Fig-4.png" alt="jBPM setting up for the value SOFT" width="311" height="421" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Fig-4.png 311w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Fig-4-222x300.png 222w" sizes="(max-width: 311px) 100vw, 311px" /&gt;&lt;p id="caption-attachment-686187" class="wp-caption-text"&gt;Figure 17: Configuring the soft-close branch.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;And the hard-close branch is shown in Figure 18.&lt;/p&gt; &lt;div id="attachment_686197" style="width: 331px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-686197" class="wp-image-686197 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Fig-5.png" alt="jBPM setting up for the value HARD." width="321" height="422" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Fig-5.png 321w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Fig-5-228x300.png 228w" sizes="(max-width: 321px) 100vw, 321px" /&gt;&lt;p id="caption-attachment-686197" class="wp-caption-text"&gt;Figure 18: Configuring the hard-close branch.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;The Hard Close embedded subprocess&lt;/h3&gt; &lt;p&gt;If the task close is hard, the process must wait for a confirmation signal coming from an external system. You have to configure this in an embedded subprocess because of the escalation requirement.&lt;/p&gt; &lt;p&gt;This subprocess is simple. There is just an intermediate signal catch, as shown in Figure 19.&lt;/p&gt; &lt;div id="attachment_686217" style="width: 323px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-686217" class="wp-image-686217 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-hard-close-signal.png" alt="jBPM catching the hard close signal." width="313" height="210" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-hard-close-signal.png 313w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-hard-close-signal-300x201.png 300w" sizes="(max-width: 313px) 100vw, 313px" /&gt;&lt;p id="caption-attachment-686217" class="wp-caption-text"&gt;Figure 19: Catching the signal for a hard close.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;You also need to implement an escalation subprocess if the task is not closed in a given time. Again, jBPM has a built-in capability to reassign a task if it is not completed in a timely fashion. For example, you could configure how to reassign the task as you see in Figure 20.&lt;/p&gt; &lt;div id="attachment_686237" style="width: 607px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-686237" class="wp-image-686237 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-00004.png" alt="jBPM's Reassignment section set to escalate a task that was not completed in time." width="597" height="286" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-00004.png 597w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-00004-300x144.png 300w" sizes="(max-width: 597px) 100vw, 597px" /&gt;&lt;p id="caption-attachment-686237" class="wp-caption-text"&gt;Figure 20: Escalating (reassigning) a task that wasn&amp;#8217;t completed in a timely fashion.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;However, you need to base the reassignment after receiving confirmation from an external system that the task was closed. Moreover, the period must be configurable as a variable, because this value depends on the specific task. Because of these reasons, you need to implement the escalation as a timer-triggered subprocess.&lt;/p&gt; &lt;p&gt;A border timer determines when an escalation is needed based on the value of the &lt;code&gt;escalationTimer&lt;/code&gt; attribute of the &lt;code&gt;Task&lt;/code&gt; object, as shown in Figure 21.&lt;/p&gt; &lt;div id="attachment_686257" style="width: 331px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-686257" class="wp-image-686257 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-escalation-timer.png" alt="jBPM setting the task to fire once when it's time." width="321" height="318" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-escalation-timer.png 321w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-escalation-timer-150x150.png 150w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-escalation-timer-300x297.png 300w" sizes="(max-width: 321px) 100vw, 321px" /&gt;&lt;p id="caption-attachment-686257" class="wp-caption-text"&gt;Figure 21: Configuring the escalation border timer.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;There is yet another way to implement SLA escalations. The &lt;a href="https://docs.jboss.org/drools/release/7.31.0.Final/kie-api-javadoc/org/kie/api/event/process/ProcessEventListener.html" target="_blank" rel="noopener noreferrer"&gt;&lt;code&gt;ProcessEventListener&lt;/code&gt; interface&lt;/a&gt; has two methods that capture the event of an SLA violation and can be implemented with custom code specifying what to do in such an event, as you can see in &lt;a href="https://gist.github.com/mauriziocarioli/4a8dac4b85c6aed698a96b3b6a49ca6f" target="_blank" rel="noopener noreferrer"&gt;this example implementation&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;/** * @param event */ public void beforeSLAViolated(SLAViolatedEvent event) { System.out.println( "Process &amp;#60;&amp;#60;"+ event.getProcessInstance().getProcessName()+ "&amp;#62;&amp;#62;-&amp;#60;"+ event.getProcessInstance().getId()+ "&amp;#62; -&amp;#62;SLA &amp;#60;&amp;#60;"+ event.getNodeInstance().getNodeName()+"&amp;#62;&amp;#62;-&amp;#60;"+ event.getNodeInstance().getNodeId()+"&amp;#62;-&amp;#60;"+ event.getNodeInstance().getId()+ "&amp;#62; SLA is about to be violated." ); } /** * @param event */ public void afterSLAViolated(SLAViolatedEvent event) { System.out.println( "Process &amp;#60;&amp;#60;"+ event.getProcessInstance().getProcessName()+ "&amp;#62;&amp;#62;-&amp;#60;"+ event.getProcessInstance().getId()+ "&amp;#62; -&amp;#62;SLA &amp;#60;&amp;#60;"+ event.getNodeInstance().getNodeName()+"&amp;#62;&amp;#62;-&amp;#60;"+ event.getNodeInstance().getNodeId()+"&amp;#62;-&amp;#60;"+ event.getNodeInstance().getId()+ "&amp;#62; SLA has been violated." ); }&lt;/pre&gt; &lt;h3&gt;The Escalation subprocess&lt;/h3&gt; &lt;p&gt;Now, configure the Escalation subprocess, as shown in Figure 22.&lt;/p&gt; &lt;div id="attachment_686277" style="width: 315px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-686277" class="wp-image-686277 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Fig-6.png" alt="jBPM setting the Escalation subprocess to independent and wait for completion." width="305" height="302" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Fig-6.png 305w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Fig-6-150x150.png 150w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Fig-6-300x297.png 300w" sizes="(max-width: 305px) 100vw, 305px" /&gt;&lt;p id="caption-attachment-686277" class="wp-caption-text"&gt;Figure 22: Creating the Escalation subprocess.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Then define the parameters of the subprocess. You need to pass the &lt;code&gt;Task&lt;/code&gt; and the &lt;code&gt;TaskActorAssignment&lt;/code&gt; objects, as you can see in Figure 23.&lt;/p&gt; &lt;div id="attachment_686287" style="width: 604px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-686287" class="wp-image-686287 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-call-Escalate-2.png" alt="" width="594" height="311" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-call-Escalate-2.png 594w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-call-Escalate-2-300x157.png 300w" sizes="(max-width: 594px) 100vw, 594px" /&gt;&lt;p id="caption-attachment-686287" class="wp-caption-text"&gt;Figure 23: Defining the data the Escalation subprocess uses.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;So far in this series, we have defined the business use case for our health management event-driven business process, and have created our data model, trigger process, and task subprocess with all of its components. In the next installment, we will complete our example configuration.&lt;/p&gt; &lt;/div&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F20%2Fdesigning-an-event-driven-process-at-scale-part-2%2F&amp;#38;linkname=Designing%20an%20event-driven%20process%20at%20scale%3A%20Part%202" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F20%2Fdesigning-an-event-driven-process-at-scale-part-2%2F&amp;#38;linkname=Designing%20an%20event-driven%20process%20at%20scale%3A%20Part%202" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F20%2Fdesigning-an-event-driven-process-at-scale-part-2%2F&amp;#38;linkname=Designing%20an%20event-driven%20process%20at%20scale%3A%20Part%202" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F20%2Fdesigning-an-event-driven-process-at-scale-part-2%2F&amp;#38;linkname=Designing%20an%20event-driven%20process%20at%20scale%3A%20Part%202" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F20%2Fdesigning-an-event-driven-process-at-scale-part-2%2F&amp;#38;linkname=Designing%20an%20event-driven%20process%20at%20scale%3A%20Part%202" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F20%2Fdesigning-an-event-driven-process-at-scale-part-2%2F&amp;#38;linkname=Designing%20an%20event-driven%20process%20at%20scale%3A%20Part%202" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F20%2Fdesigning-an-event-driven-process-at-scale-part-2%2F&amp;#38;linkname=Designing%20an%20event-driven%20process%20at%20scale%3A%20Part%202" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F20%2Fdesigning-an-event-driven-process-at-scale-part-2%2F&amp;#038;title=Designing%20an%20event-driven%20process%20at%20scale%3A%20Part%202" data-a2a-url="https://developers.redhat.com/blog/2020/02/20/designing-an-event-driven-process-at-scale-part-2/" data-a2a-title="Designing an event-driven process at scale: Part 2"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/02/20/designing-an-event-driven-process-at-scale-part-2/"&gt;Designing an event-driven process at scale: Part 2&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/SwLTai92w4I" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;In the first article in this series, Designing an event-driven business process at scale: A health management example, Part 1, we began by defining the business use case and data model for a concrete example from the health management industry. We then began implementing the example in jBPM (an open source business automation suite) by [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/02/20/designing-an-event-driven-process-at-scale-part-2/"&gt;Designing an event-driven process at scale: Part 2&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><post-id xmlns="com-wordpress:feed-additions:1">685907</post-id><dc:creator>mcarioli</dc:creator><dc:date>2020-02-20T08:00:31Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/02/20/designing-an-event-driven-process-at-scale-part-2/</feedburner:origLink></entry><entry><title>Integrating with SaaS Applications - Example CRM Integration</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/hFHJxww8NNE/integrating-saas-applications-example-crm-integration.html" /><category term="AppDev" scheme="searchisko:content:tags" /><category term="Architecture Blueprints" scheme="searchisko:content:tags" /><category term="Automate" scheme="searchisko:content:tags" /><category term="cloud" scheme="searchisko:content:tags" /><category term="Containers" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_ericschabell" scheme="searchisko:content:tags" /><category term="FUSE" scheme="searchisko:content:tags" /><category term="JBoss" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="Process Automation Manager" scheme="searchisko:content:tags" /><author><name>Eric D. Schabell</name></author><id>searchisko:content:id:jbossorg_blog-integrating_with_saas_applications_example_crm_integration</id><updated>2020-02-20T06:00:01Z</updated><published>2020-02-20T06:00:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;table cellpadding="0" cellspacing="0" class="tr-caption-container" style="float: left; margin-right: 1em; text-align: left;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-AzXG8srNP44/Xj-t6bgALLI/AAAAAAAABnw/lgKidHnFpYYF8hikQzFZIgT313nlBAgiACLcBGAsYHQ/s1600/integrate-saas-apps-ld.png" style="clear: left; margin-bottom: 1em; margin-left: auto; margin-right: auto;"&gt;&lt;img alt="integrating with SaaS applications" border="0" data-original-height="900" data-original-width="1600" height="180" src="https://1.bp.blogspot.com/-AzXG8srNP44/Xj-t6bgALLI/AAAAAAAABnw/lgKidHnFpYYF8hikQzFZIgT313nlBAgiACLcBGAsYHQ/s320/integrate-saas-apps-ld.png" title="" width="320" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;Part 3 - Example CRM integration&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;The previous article in this series looked at &lt;a href="https://www.schabell.org/2020/02/integrating-saas-applications-common-architectural-elements.html" target="_blank"&gt;common architectural elements&lt;/a&gt; for integrating with SaaS applications.&lt;br /&gt;&lt;br /&gt;The foundation for this logical diagram was researching a use case where customers were successful with a portfolio solution.&lt;br /&gt;&lt;br /&gt;It's a starting point for the generic architectural blueprint that rises from several customer solution that were researched.&lt;br /&gt;&lt;br /&gt;Having completed the outline of the blueprint details and the resulting logical diagram elements, it's now time to take a look as specific examples. &lt;br /&gt;&lt;br /&gt;In this article you'll walk through a specific example where organizations are looking at integrating with external customer relationship management (CRM) applications. This is done to leverage pushing and pulling information from their organization to and from the CRM application. &lt;br /&gt;&lt;a name='more'&gt;&lt;/a&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;Blueprint scenarios&lt;/h3&gt;As a reminder, the architectural details covered here are base on real customer integration solutions using open source technologies.&lt;br /&gt;&lt;br /&gt;The example scenario presented here is a generic common blueprint that was uncovered researching customer solutions. It's my intent to provide a blueprint that provides guidance and not deep technical details.&lt;br /&gt;&lt;br /&gt;This section covers the visual representations as presented. There are many ways to represent each element in this architectural blueprint, but I've chosen icons, text and colors that I hope are going to make it all easy to absorb. Feel free to post comments at the bottom of this post, or &lt;a href="https://www.schabell.org/p/contact.html" target="_blank"&gt;contact me directly&lt;/a&gt; with your feedback.&lt;br /&gt;&lt;br /&gt;Now let's take a look at the details in this blueprint and outline the solution.&lt;br /&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;Integrating with CRM applications&lt;/h3&gt;The example blueprint shown in figure titled &lt;i&gt;Example: External CRM Integration&lt;/i&gt; outlines how to integrate an external SaaS CRM application in to your architecture. Note that this diagram is focusing narrowly on the aspects related to integrating with anb external SaaS CRM application, therefore it's detailing a small set of integration components.&lt;br /&gt;&lt;br /&gt;&lt;a href="https://1.bp.blogspot.com/-L8bh3a6QIUg/Xk0-W0_RmSI/AAAAAAAAw5c/8UQfJCmRsrkLDCo7HlSnPsgAB_4mVMauwCNcBGAsYHQ/s1600/crm-saas-integration.png" imageanchor="1" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img alt="integrating with CRM applications" border="0" data-original-height="825" data-original-width="1600" height="165" src="https://1.bp.blogspot.com/-L8bh3a6QIUg/Xk0-W0_RmSI/AAAAAAAAw5c/8UQfJCmRsrkLDCo7HlSnPsgAB_4mVMauwCNcBGAsYHQ/s320/crm-saas-integration.png" title="" width="320" /&gt;&lt;/a&gt;In this example, starting from the top left corner, the &lt;i&gt;web application &lt;/i&gt;is the entry point for users and can be more than just a web application. It represents everything from partners, customers, to internal employee interfacing as an entry point with the organizations architecture.&lt;br /&gt;&lt;br /&gt;This connects to your services through an &lt;i&gt;API gateway&lt;/i&gt;. It's leveraging a group of &lt;i&gt;frontend microservices&lt;/i&gt; that provide needed functionality, everything from simple to the complex activities that front end application need to service their clients.&lt;br /&gt;&lt;br /&gt;&lt;i&gt;Frontend microservices&lt;/i&gt; are also gathering data and information from the various organizational backend systems by working through &lt;i&gt;integration microservices&lt;/i&gt;. There is a conscience effort here to keep this blueprint example as concise as possible, therefore the integration of various potential back-end systems has been simplified to just the &lt;i&gt;external SaaS CRM application&lt;/i&gt;.&lt;br /&gt;&lt;br /&gt;When interaction with organizational processes is desired, you can leverage the &lt;i&gt;process microservices&lt;/i&gt; that expose process automation functionality. These in turn make use of the &lt;i&gt;integration microservices&lt;/i&gt; for interacting with the &lt;i&gt;external SaaS CRM application&lt;/i&gt;.&lt;br /&gt;&lt;br /&gt;For completeness, the &lt;i&gt;single-sign-on (SSO) server&lt;/i&gt; and its integration with the organizations &lt;i&gt;active directory server&lt;/i&gt; is shown. This represents the pervasive nature of security as all microservices should have an SSO plugin assisting with authentication and authorization tasks.&lt;br /&gt;&lt;h3&gt;What's next&lt;/h3&gt;&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;An overview of the series on integrating SaaS applications portfolio architecture blueprint can be found here:&lt;br /&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;&lt;a href="https://www.schabell.org/2020/01/integrating-saas-applications-an-introduction.html" target="_blank"&gt;An introduction&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://www.schabell.org/2020/02/integrating-saas-applications-common-architectural-elements.html" target="_blank"&gt;Common architectural elements&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://www.schabell.org/2020/02/integrating-saas-applications-example-crm-integration.html" target="_blank"&gt;Example CRM integration&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Example CRM connector integration &lt;/li&gt;&lt;li&gt;Example 3rd-party platform integration&lt;/li&gt;&lt;li&gt;Example processes with 3rd-party platform integration&lt;/li&gt;&lt;/ol&gt;Catch up on any articles you missed by following one of the links above.&lt;br /&gt;&lt;br /&gt;Next in this series, taking a look at more details when connecting to external SaaS CRM applications using a specific connector.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=mdJQxFhQ08s:LZzPO1oUZT4:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=mdJQxFhQ08s:LZzPO1oUZT4:63t7Ie-LG7Y"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=63t7Ie-LG7Y" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=mdJQxFhQ08s:LZzPO1oUZT4:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=mdJQxFhQ08s:LZzPO1oUZT4:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=mdJQxFhQ08s:LZzPO1oUZT4:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=mdJQxFhQ08s:LZzPO1oUZT4:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=mdJQxFhQ08s:LZzPO1oUZT4:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=mdJQxFhQ08s:LZzPO1oUZT4:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=mdJQxFhQ08s:LZzPO1oUZT4:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=mdJQxFhQ08s:LZzPO1oUZT4:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=mdJQxFhQ08s:LZzPO1oUZT4:gIN9vFwOqvQ" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/schabell/jboss/~4/mdJQxFhQ08s" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/hFHJxww8NNE" height="1" width="1" alt=""/&gt;</content><summary>Part 3 - Example CRM integrationThe previous article in this series looked at common architectural elements for integrating with SaaS applications. The foundation for this logical diagram was researching a use case where customers were successful with a portfolio solution. It's a starting point for the generic architectural blueprint that rises from several customer solution that were researched. ...</summary><dc:creator>Eric D. Schabell</dc:creator><dc:date>2020-02-20T06:00:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/mdJQxFhQ08s/integrating-saas-applications-example-crm-integration.html</feedburner:origLink></entry><entry><title>This blog is moving</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/CAnbQqRNd98/this-blog-is-moving" /><category term="blog" scheme="searchisko:content:tags" /><category term="Elytron" scheme="searchisko:content:tags" /><category term="feed_group_name_aggregated" scheme="searchisko:content:tags" /><category term="feed_name_fjuma" scheme="searchisko:content:tags" /><author><name>Farah Juma</name></author><id>searchisko:content:id:jbossorg_blog-this_blog_is_moving</id><updated>2020-02-19T17:08:10Z</updated><published>2020-02-19T17:08:10Z</published><content type="html">&lt;!-- [DocumentBodyStart:b62fcc87-a437-4816-879c-34a8c420b7ef] --&gt;&lt;div class="jive-rendered-content"&gt;&lt;p&gt;Since the Elytron project now has a new &lt;a class="jive-link-external-small" href="https://wildfly-security.github.io/wildfly-elytron/" rel="nofollow"&gt;site&lt;/a&gt;, all of our blog posts on Elytron will be hosted there. Keep an eye on &lt;a class="jive-link-external-small" href="https://wildfly-security.github.io/wildfly-elytron/blog/" rel="nofollow"&gt;https://wildfly-security.github.io/wildfly-elytron/blog/&lt;/a&gt; for new posts.&lt;/p&gt;&lt;/div&gt;&lt;!-- [DocumentBodyEnd:b62fcc87-a437-4816-879c-34a8c420b7ef] --&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/CAnbQqRNd98" height="1" width="1" alt=""/&gt;</content><summary>Since the Elytron project now has a new site, all of our blog posts on Elytron will be hosted there. Keep an eye on https://wildfly-security.github.io/wildfly-elytron/blog/ for new posts.</summary><dc:creator>Farah Juma</dc:creator><dc:date>2020-02-19T17:08:10Z</dc:date><feedburner:origLink>https://developer.jboss.org/people/fjuma/blog/2020/02/19/this-blog-is-moving</feedburner:origLink></entry><entry><title>Designing an event-driven business process at scale: A health management example, Part 1</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/Bf3aemT1j1g/" /><category term="Event-Driven" /><category term="Java" /><category term="Modern App Dev" /><category term="business process management" /><category term="Design Patterns" /><category term="digital process automation" /><category term="jBPM" /><category term="RHPAM" /><author><name>mcarioli</name></author><id>https://developers.redhat.com/blog/?p=676127</id><updated>2020-02-19T08:00:16Z</updated><published>2020-02-19T08:00:16Z</published><content type="html">&lt;p&gt;The concept of a &lt;em&gt;business process&lt;/em&gt; (BP), or &lt;em&gt;workflow&lt;/em&gt; (WF), and the discipline and practice of business process management (BPM) have been around since the early 90s. Since then, WF/BPM tools have evolved considerably. More recently, a convergence of different tools has taken place, adding decision management (DM) and case management (CM) to the mix. The ascendance of data science, machine learning, and artificial intelligence in the last few years has further complicated the picture. The mature field of BPM has been subsumed into the hyped pseudo-novelties of digital business automation, digital reinvention, digital everything, etc., with the addition of &amp;#8220;low code&amp;#8221; and robotic process automation (RPA).&lt;/p&gt; &lt;p&gt;A common requirement of business applications today is to be event-driven; that is, specific events should trigger a workflow or decision in real-time. This requirement leads to a fundamental problem. In realistic situations, there are many different types of events, each one requiring specific handling. An event-driven business application may have hundreds of qualitatively different workflows or processes. As new types of events arise in today&amp;#8217;s ever-changing business conditions, new processes have to be designed and deployed as quickly as possible.&lt;/p&gt; &lt;p&gt;&lt;span id="more-676127"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;This situation is different than the common requirement of scalability at runtime. It&amp;#8217;s not just a problem of making an architecture scale to a large number of events per second. That problem is in many respects easy to solve. The problem of scalability at design time is what I am concerned about here.&lt;/p&gt; &lt;p&gt;In this first article in the series, I will define the business use case and data model for a concrete example from the health management industry. Then, I will show you how to create the trigger process that begins your &lt;a href="https://www.jbpm.org/" target="_blank" rel="noopener noreferrer"&gt;jBPM&lt;/a&gt; (open source business automation suite) implementation for this scenario. In subsequent articles, I will continue the detailed walk-through for this example implementation.&lt;/p&gt; &lt;p&gt;In particular, this example illustrates several Business Process Model and Notation (BPMN) constructs as they are implemented in jBPM:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Business process abstraction.&lt;/li&gt; &lt;li&gt;Service tasks or work item handlers.&lt;/li&gt; &lt;li&gt;REST API calls from within a process.&lt;/li&gt; &lt;li&gt;Email sending from within a process.&lt;/li&gt; &lt;li&gt;Signal sending and catching.&lt;/li&gt; &lt;li&gt;Timer-based reminders and escalations.&lt;/li&gt; &lt;/ul&gt; &lt;h2&gt;The business use case&lt;/h2&gt; &lt;p&gt;Population health management (PHM) is an important approach to health care that leverages &lt;a href="https://www.ncbi.nlm.nih.gov/pubmed/19275994" target="_blank" rel="noopener noreferrer"&gt;recent advances in technology&lt;/a&gt; to aggregate health data across a variety of sources, analyze this data into a unified and actionable view of the patient, and trigger specific actions that should improve both clinical and financial results. Of course, this topic implies handling protected personal information, which should be done in full compliance with existing legislation (or &lt;a href="https://www.theverge.com/2019/11/11/20959771/google-health-records-project-nightingale-privacy-ascension" target="_blank" rel="noopener noreferrer"&gt;controversy will ensue&lt;/a&gt;).&lt;/p&gt; &lt;p&gt;An insurance company or health management organization tracks a considerable wealth of information about the health history of every &lt;a href="https://www.investopedia.com/terms/m/mutual-insurance-company.asp" target="_blank" rel="noopener noreferrer"&gt;member&lt;/a&gt;. For example, a member known to have a certain medical condition is supposed to periodically do things such as visiting a doctor or undergoing a test. Missing such actions should trigger a workflow in the PHM system to make sure that the member is back on track.&lt;/p&gt; &lt;p&gt;For the sake of the example, let&amp;#8217;s say that a member has rheumatoid arthritis. This person is supposed to take a &lt;a href="https://en.wikipedia.org/wiki/Disease-modifying_antirheumatic_drug" target="_blank" rel="noopener noreferrer"&gt;DMARD&lt;/a&gt; drug. It is easy to check periodically if a prescription for such a drug has been filled over a certain period of time, say one year. If no such prescription has been filled in the past year for a member with this condition, certain actions should be taken by a given actor:&lt;/p&gt; &lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Task code&lt;/th&gt; &lt;th&gt;Activities&lt;/th&gt; &lt;th&gt;Actor&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;A490.0&lt;/td&gt; &lt;td&gt;The member&amp;#8217;s doctor should be notified.&lt;/td&gt; &lt;td&gt;PRO&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;B143&lt;/td&gt; &lt;td&gt;An insurance channel worker should perform related administrative tasks.&lt;/td&gt; &lt;td&gt;CHW&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;C178&lt;/td&gt; &lt;td&gt;The member should be educated.&lt;/td&gt; &lt;td&gt;MEM&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;C201&lt;/td&gt; &lt;td&gt;The member should talk to a pharmacist.&lt;/td&gt; &lt;td&gt;RXS&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;p&gt;Certain tasks should occur only after another task has completed:&lt;/p&gt; &lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Task code&lt;/th&gt; &lt;th&gt;Predecessor task&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;A490.0&lt;/td&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;B143&lt;/td&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;C178&lt;/td&gt; &lt;td&gt;A490.0&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;C201&lt;/td&gt; &lt;td&gt;A490.0&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;p&gt;The task life cycle should be determined by the change of task status, where the task status has the following values and meanings:&lt;/p&gt; &lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Status&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;Inactive&lt;/td&gt; &lt;td style="text-align: left;"&gt;Not the season for this task.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Suppressed&lt;/td&gt; &lt;td&gt;Specific member situation dictates this task should be suppressed.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Closed&lt;/td&gt; &lt;td&gt;Soft close: Assumed completed until hard close notification.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Completed&lt;/td&gt; &lt;td&gt;Hard close: Verification of completion received.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Expired&lt;/td&gt; &lt;td&gt;Not completed prior to expiration.&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;p&gt;The distinction between closed (soft close) and completed (hard close) is important. An actor is allowed to soft close a task, but the task should be considered to be completed only upon verification of the task&amp;#8217;s outcome. Only then should the task contribute to the measurement of key performance indicators (KPIs).&lt;/p&gt; &lt;p&gt;A soft close should be accomplished by the actor by either clicking on a &lt;strong&gt;Complete&lt;/strong&gt; button or specifying that the task is Not Applicable (and providing an explanation with supplemental data that can be uploaded). The hard close should require notification from an external system:&lt;/p&gt; &lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Code&lt;/th&gt; &lt;th&gt;Soft Close&lt;/th&gt; &lt;th&gt;Hard Close&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;A490.0&lt;/td&gt; &lt;td&gt;Completed or N/A&lt;/td&gt; &lt;td&gt;&lt;a href="https://www.ncqa.org/hedis/" target="_blank" rel="noopener noreferrer"&gt;HEDIS&lt;/a&gt; Engine Compliance.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;B143&lt;/td&gt; &lt;td&gt;Completed or N/A&lt;/td&gt; &lt;td&gt;Provider and pharmacy attestation.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;C178&lt;/td&gt; &lt;td&gt;Completed or N/A&lt;/td&gt; &lt;td&gt;With soft close.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;C201&lt;/td&gt; &lt;td&gt;Click to call pharmacist&lt;/td&gt; &lt;td&gt;With soft close&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;p&gt;If a task actor is late in completing the assigned task, a reminder must be sent to the corresponding actor. Then, if the task is not closed after a certain period of time, the action must be escalated to a manager:&lt;/p&gt; &lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Task Code&lt;/th&gt; &lt;th&gt;Reminder Frequency&lt;/th&gt; &lt;th&gt;Escalation After&lt;/th&gt; &lt;th&gt;Escalation Actor&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;A490.0&lt;/td&gt; &lt;td&gt;14 days&lt;/td&gt; &lt;td&gt;30 days&lt;/td&gt; &lt;td&gt;PEA&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;B143&lt;/td&gt; &lt;td&gt;30 days&lt;/td&gt; &lt;td&gt;90 days&lt;/td&gt; &lt;td&gt;MCH&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;C178&lt;/td&gt; &lt;td&gt;7 days&lt;/td&gt; &lt;td&gt;60 days&lt;/td&gt; &lt;td&gt;MRX&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;C201&lt;/td&gt; &lt;td&gt;7 days&lt;/td&gt; &lt;td&gt;30 days&lt;/td&gt; &lt;td&gt;CHW&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;p&gt;In any case, each action should expire by the end of the year.&lt;/p&gt; &lt;p&gt;The last requirement is that it should be possible to prevent a task from being executed during a defined suppression period. This practice is the equivalent of dozing an alarm clock.&lt;/p&gt; &lt;p&gt;The following table briefly describes all of the actors mentioned so far:&lt;/p&gt; &lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Actor&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;PRO&lt;/td&gt; &lt;td&gt;Provider&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;MEM&lt;/td&gt; &lt;td&gt;Member&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;CHW&lt;/td&gt; &lt;td&gt;Community Health Worker&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;RXS&lt;/td&gt; &lt;td&gt;Pharmacist&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;PEA&lt;/td&gt; &lt;td&gt;Provider Engagement Advocate&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;MCH&lt;/td&gt; &lt;td&gt;Community Health Manager&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;MRX&lt;/td&gt; &lt;td&gt;Pharmacy Manager&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;p&gt;In essence, these requirements define a workflow that must be completed for a given PHM event or trigger, such as the member missing a DMARD prescription.&lt;/p&gt; &lt;p&gt;You don&amp;#8217;t want to have to redo all of the implementation work if the member is diabetic and did not receive a statin medication within the year instead of missing a DMARD prescription. There are possibly hundreds of distinct events/triggers in PHM, and having to model the workflow of each one of them separately does not scale. This is the most important requirement from a business perspective: The design of the implementation must be able to scale to as many different types of triggers that there could possibly be, and it must be such that new triggers can be added with the least possible amount of effort.&lt;/p&gt; &lt;h2&gt;Implementation as a business process&lt;/h2&gt; &lt;p&gt;A complete business process implementing these requirements in &lt;a href="https://www.jbpm.org/" target="_blank" rel="noopener noreferrer"&gt;jBPM&lt;/a&gt; can be imported from &lt;a href="https://github.com/mauriziocarioli/PHM-Processes" target="_blank" rel="noopener noreferrer"&gt;GitHub&lt;/a&gt;. However, I encourage you to build it from scratch following the detailed steps starting in the next section.&lt;/p&gt; &lt;p&gt;Business processes in jBPM follow the latest &lt;a href="https://www.omg.org/spec/BPMN/2.0/" target="_blank" rel="noopener noreferrer"&gt;BPMN 2.0&lt;/a&gt; specification. You can design a business process to be data-driven as well as event-driven. However, business processes are a realization of procedural imperative programming. This means that the business logic has to be explicitly spelled out in its entirety.&lt;/p&gt; &lt;p&gt;The implementation should be completely data-driven to satisfy the business scalability requirement as much as possible. The trigger workflow should be parameterized with data fed to the process engine so that one business process definition is capable of handling any trigger event.&lt;/p&gt; &lt;h3&gt;The data model&lt;/h3&gt; &lt;p&gt;Most of the workflow-related properties of a task are contained in the custom data type &lt;code&gt;Task&lt;/code&gt;:&lt;/p&gt; &lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Attribute&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;id&lt;/td&gt; &lt;td&gt;The id of the task.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;original id&lt;/td&gt; &lt;td&gt;The task code.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;status&lt;/td&gt; &lt;td&gt;The status tracking the task life cycle.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;predecessor&lt;/td&gt; &lt;td&gt;The task preceding the current one in the task workflow.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;close&lt;/td&gt; &lt;td&gt;The task closing type (soft or hard).&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;close signal&lt;/td&gt; &lt;td&gt;The signal to hard close the task.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;reminder initiation&lt;/td&gt; &lt;td&gt;When the first reminder should occur.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;reminder frequency&lt;/td&gt; &lt;td&gt;The frequency of the reminders.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;escalated&lt;/td&gt; &lt;td&gt;A flag indicating if an escalation should occur.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;escalation timer&lt;/td&gt; &lt;td&gt;When an escalation should occur.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;suppressed&lt;/td&gt; &lt;td&gt;A flag indicating if task is suppressed.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;suppression period&lt;/td&gt; &lt;td&gt;The period of time the task has to remain suppressed.&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;p&gt;The custom data type &lt;code&gt;TaskActorAssignment&lt;/code&gt; holds the information needed to assign the task to an actor:&lt;/p&gt; &lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Attribute&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;actor&lt;/td&gt; &lt;td&gt;The task&amp;#8217;s actor.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;channel&lt;/td&gt; &lt;td&gt;The application (user interface) where the task is performed (i.e., data entry).&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;escalation actor&lt;/td&gt; &lt;td&gt;The actor responsible for the escalation.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;escalation channel&lt;/td&gt; &lt;td&gt;The application (user interface) used in the escalation.&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;p&gt;The custom data type &lt;code&gt;Reminder&lt;/code&gt; holds the information needed to send a reminder to the task actor:&lt;/p&gt; &lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Attribute&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;address&lt;/td&gt; &lt;td&gt;The (email) address of the task&amp;#8217;s actor.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;subject&lt;/td&gt; &lt;td&gt;The subject of the reminder.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;body&lt;/td&gt; &lt;td&gt;The content of the reminder.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;from&lt;/td&gt; &lt;td&gt;The (email) address sending the reminder.&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;p&gt;All of this data is retrieved from a service. You need to represent the response of the service as the custom data type &lt;code&gt;Response&lt;/code&gt;:&lt;/p&gt; &lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Attribute&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;task&lt;/td&gt; &lt;td&gt;The task data.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;assignment&lt;/td&gt; &lt;td&gt;The task actor assignment data.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;reminder&lt;/td&gt; &lt;td&gt;The reminder data.&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;p&gt;It is understood that for any given PHM event or trigger, the service will produce a list of response objects, one for each task in the PHM event workflow. The Java class diagram shown in Figure 1 summarizes what is needed.&lt;/p&gt; &lt;div id="attachment_684537" style="width: 555px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-684537" class="wp-image-684537 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/02/phm_model-545x1024.png" alt="Diagram showing the Java class requirements for the PHM workflow." width="545" height="1024" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/02/phm_model-545x1024.png 545w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/phm_model-160x300.png 160w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/phm_model.png 655w" sizes="(max-width: 545px) 100vw, 545px" /&gt;&lt;p id="caption-attachment-684537" class="wp-caption-text"&gt;Figure 1: Summary of the Java class requirements for the PHM workflow.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;You should implement the model in Java. All classes must be serializable. Overriding the &lt;code&gt;toString&lt;/code&gt; method is optional, but it helps when tracing process execution.&lt;/p&gt; &lt;p&gt;This model can be imported into jBPM from &lt;a href="https://github.com/mauriziocarioli/PHM-Model" target="_blank" rel="noopener noreferrer"&gt;GitHub&lt;/a&gt;.&lt;/p&gt; &lt;h3&gt;The trigger process&lt;/h3&gt; &lt;p&gt;After creating the project in jBPM for the &lt;a href="https://docs.jboss.org/jbpm/release/latest/jbpm-docs/html_single/#business_process" target="_blank" rel="noopener noreferrer"&gt;business process&lt;/a&gt;, implementing the trigger workflow makes sure that the model project is a dependency in the project settings:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Create the process in the &lt;a href="https://docs.jboss.org/jbpm/release/latest/jbpm-docs/html_single/#_process_designer" target="_blank" rel="noopener noreferrer"&gt;process designer &lt;/a&gt;with the properties shown in Figure 2.&lt;/li&gt; &lt;/ol&gt; &lt;div id="attachment_684557" style="width: 336px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-684557" class="wp-image-684557 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Fig-203.png" alt="jBPM process designer with the example's settings" width="326" height="547" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Fig-203.png 326w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Fig-203-179x300.png 179w" sizes="(max-width: 326px) 100vw, 326px" /&gt;&lt;p id="caption-attachment-684557" class="wp-caption-text"&gt;Figure 2: Add the example process into jBPM.&lt;/p&gt;&lt;/div&gt; &lt;ol start="2"&gt; &lt;li&gt;Add the &lt;a href="https://docs.jboss.org/jbpm/release/latest/jbpm-docs/html_single/#_variables" target="_blank" rel="noopener noreferrer"&gt;process variables&lt;/a&gt; as shown in Figure 3.&lt;/li&gt; &lt;/ol&gt; &lt;div id="attachment_684567" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-684567" class="wp-image-684567" src="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-0002.png" alt="jBPM process designer with the example's variables" width="640" height="288" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-0002.png 717w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-0002-300x135.png 300w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-684567" class="wp-caption-text"&gt;Figure 3: Add the example process variables into jBPM.&lt;/p&gt;&lt;/div&gt; &lt;ol start="3"&gt; &lt;li&gt;Add the imports as shown in Figure 4.&lt;/li&gt; &lt;/ol&gt; &lt;div id="attachment_684587" style="width: 605px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-684587" class="wp-image-684587 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Fig-204.png" alt="jBPM process designer with the example's data type imports" width="595" height="549" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Fig-204.png 595w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Fig-204-300x277.png 300w" sizes="(max-width: 595px) 100vw, 595px" /&gt;&lt;p id="caption-attachment-684587" class="wp-caption-text"&gt;Figure 4: Add the example process data types to import into jBPM.&lt;/p&gt;&lt;/div&gt; &lt;ol start="4"&gt; &lt;li&gt;Draw the following diagram in the process designer as shown in Figure 5:&lt;/li&gt; &lt;/ol&gt; &lt;div id="attachment_686487" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Fig-215-original-size.png"&gt;&lt;img aria-describedby="caption-attachment-686487" class="wp-image-686487 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Fig-215-original-size-1024x276.png" alt="jBPM process designer diagram defining trigger task workflow" width="640" height="173" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Fig-215-original-size-1024x276.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Fig-215-original-size-300x81.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Fig-215-original-size-768x207.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Fig-215-original-size.png 1600w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-686487" class="wp-caption-text"&gt;Figure 5: Use the process designer to define what happens with each task in the trigger.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;This type of business application is typically subscribed to a data streaming solution&amp;#8217;s topic, such as &lt;a href="https://kafka.apache.org/" target="_blank" rel="noopener noreferrer"&gt;Apache Kafka&lt;/a&gt;. However, we are not concerned with the precise data feeding mechanism for now, and the process is simply started by the REST API.&lt;/p&gt; &lt;h4&gt;Get the data&lt;/h4&gt; &lt;p&gt;Start by creating an external service call to get all of the data needed to execute the subprocess as a function of the member token and the trigger id. This call frees the streaming application starting the process from the burden of orchestrating data services. This activity is implemented as a &lt;a href="https://github.com/kiegroup/jbpm/blob/master/jbpm-workitems/jbpm-workitems-rest/src/main/java/org/jbpm/process/workitem/rest/" target="_blank" rel="noopener noreferrer"&gt;REST&lt;/a&gt; &lt;a href="https://docs.jboss.org/jbpm/release/latest/jbpm-docs/html_single/#_work_item_handlers" target="_blank" rel="noopener noreferrer"&gt;Work Item Handler&lt;/a&gt;, which is pre-installed in jBPM.&lt;/p&gt; &lt;p&gt;You need to create two actions for this step: an &lt;em&gt;on entry action&lt;/em&gt;, and an &lt;em&gt;on exit action&lt;/em&gt;. (You will also need to implement the service called by the service task, but we will talk about that later.) Add &lt;a href="https://gist.github.com/mauriziocarioli/34ddb1be9658d14fa81bddcf9b228a3a" target="_blank" rel="noopener noreferrer"&gt;the following code&lt;/a&gt; to the &lt;em&gt;on entry action&lt;/em&gt;:&lt;/p&gt; &lt;pre&gt;final ObjectMapper om = new ObjectMapper(); ArrayList&amp;#60;Response&amp;#62; dd = new ArrayList&amp;#60;Response&amp;#62;(); List rr = (List)kcontext.getVariable("pResult"); Iterator&amp;#60;LinkedHashMap&amp;#62; i = rr.iterator(); while(i.hasNext()) { LinkedHashMap m = (LinkedHashMap)i.next(); dd.add(om.convertValue(m,Response.class)); } kcontext.setVariable("pDataList",dd);&lt;/pre&gt; &lt;p&gt;Then, add &lt;a href="https://gist.github.com/mauriziocarioli/66f06d0a5a986e0aa930b230b85afdf5" target="_blank" rel="noopener noreferrer"&gt;the following code&lt;/a&gt; to the &lt;em&gt;on exit action&lt;/em&gt;:&lt;/p&gt; &lt;pre&gt;final ObjectMapper om = new ObjectMapper(); ArrayList&amp;#60;Response&amp;#62; dd = new ArrayList&amp;#60;Response&amp;#62;(); List rr = (List)kcontext.getVariable("pResult"); Iterator&amp;#60;LinkedHashMap&amp;#62; i = rr.iterator(); while(i.hasNext()) { LinkedHashMap m = (LinkedHashMap)i.next(); dd.add(om.convertValue(m,Response.class)); } kcontext.setVariable("pDataList",dd);&lt;/pre&gt; &lt;p&gt;The reason for the on exit action is that the REST API service delivers the data as a list of maps. The actual Response objects must be obtained by converting each map in the list. There is no way around this requirement, so the collection that contains the list of Response objects is the variable &lt;code&gt;pDataList&lt;/code&gt; and not &lt;code&gt;pReturn&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The only parameters to configure are:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;code&gt;Method&lt;/code&gt; as &lt;code&gt;GET&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;code&gt;Url&lt;/code&gt; as &lt;code&gt;pGetInfoUrl&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;code&gt;ContentType&lt;/code&gt; as &lt;code&gt;application/json&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;code&gt;ResultClass&lt;/code&gt; as &lt;code&gt;java.util.List&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;code&gt;Result&lt;/code&gt; as &lt;code&gt;pResult&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;In real life, more parameters are needed. For example, the BPM will have to authenticate to retrieve the data. However, for the sake of this exercise, you will keep this service as simple as possible.&lt;/p&gt; &lt;h4&gt;Handle the data&lt;/h4&gt; &lt;p&gt;Next, you need to create the &lt;a href="https://docs.jboss.org/jbpm/release/latest/jbpm-docs/html_single/#_multi_instance_sub_process" target="_blank" rel="noopener noreferrer"&gt;multiple instance subprocess&lt;/a&gt; that iterates over each task in the trigger&amp;#8217;s workflow once the data is available. You need to implement the requirement that certain tasks must come after given tasks in the workflow. In our example, tasks C178 and C201 must follow A490.0.&lt;/p&gt; &lt;p&gt;To configure the multiple instance subprocess with parallel execution (you want all subprocess instances to start at the same time), use &lt;code&gt;pDataList&lt;/code&gt; as the collection and &lt;code&gt;pData&lt;/code&gt; as the item, as shown in Figure 6.&lt;/p&gt; &lt;div id="attachment_684627" style="width: 403px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-684627" class="wp-image-684627 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Process-Fig-216.png" alt="The jBPM Implementation/Execution section set up for the example." width="393" height="450" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Process-Fig-216.png 393w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Process-Fig-216-262x300.png 262w" sizes="(max-width: 393px) 100vw, 393px" /&gt;&lt;p id="caption-attachment-684627" class="wp-caption-text"&gt;Figure 6: Create a multiple instance subprocess with parallel execution.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;The individual task workflow is modeled as a &lt;a href="https://docs.jboss.org/jbpm/release/latest/jbpm-docs/html_single/#_reusable_sub_process" target="_blank" rel="noopener noreferrer"&gt;reusable subprocess&lt;/a&gt; with properties, as shown in Figure 7.&lt;/p&gt; &lt;div id="attachment_684637" style="width: 447px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-684637" class="wp-image-684637 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-A490-call-properties-1.png" alt="The jBPM Implementation/Execution section's called element setup." width="437" height="355" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-A490-call-properties-1.png 437w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-A490-call-properties-1-300x244.png 300w" sizes="(max-width: 437px) 100vw, 437px" /&gt;&lt;p id="caption-attachment-684637" class="wp-caption-text"&gt;Figure 7: Create the individual task&amp;#8217;s workflow.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;The process variables should be defined as well, as shown in Figure 8.&lt;/p&gt; &lt;div id="attachment_684657" style="width: 408px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-684657" class="wp-image-684657 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Fig-217.png" alt="The jBPM process variables setup." width="398" height="199" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Fig-217.png 398w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Fig-217-300x150.png 300w" sizes="(max-width: 398px) 100vw, 398px" /&gt;&lt;p id="caption-attachment-684657" class="wp-caption-text"&gt;Figure 8: Define your process variables.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;The subprocess variables are initialized in a script task. Write &lt;a href="https://gist.github.com/mauriziocarioli/f7e8c4a93f8096a1e757980374ed4f78" target="_blank" rel="noopener noreferrer"&gt;the following code&lt;/a&gt; in the body of the script task:&lt;/p&gt; &lt;pre&gt;Response d = (Response)kcontext.getVariable("pData"); kcontext.setVariable("_taskId",d.getTask().getOrigId()); kcontext.setVariable("_predecessorId",d.getTask().getPredecessor());&lt;/pre&gt; &lt;p&gt;The task sorting logic is based on the task&amp;#8217;s predecessor property, as shown in Figure 9.&lt;/p&gt; &lt;div id="attachment_684677" style="width: 352px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-684677" class="wp-image-684677 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Fig-218.png" alt="Diagram showing the task's sorting logic." width="342" height="239" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Fig-218.png 342w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Fig-218-300x210.png 300w" sizes="(max-width: 342px) 100vw, 342px" /&gt;&lt;p id="caption-attachment-684677" class="wp-caption-text"&gt;Figure 9: Implement the task sorting logic.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;The first &lt;a href="https://docs.jboss.org/jbpm/release/latest/jbpm-docs/html_single/#_diverging_gateway" target="_blank" rel="noopener noreferrer"&gt;diverging exclusive gateway&lt;/a&gt; lets the process proceed to the task subprocess if this property is null, as shown in Figure 10.&lt;/p&gt; &lt;div id="attachment_684687" style="width: 327px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-684687" class="wp-image-684687 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-219.png" alt="jBPM Implementation/Execution section for a null gateway." width="317" height="326" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-219.png 317w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-219-292x300.png 292w" sizes="(max-width: 317px) 100vw, 317px" /&gt;&lt;p id="caption-attachment-684687" class="wp-caption-text"&gt;Figure 10: Create your null gateway.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;If the current task has a predecessor, as shown in Figure 11, &lt;a href="https://docs.jboss.org/jbpm/release/latest/jbpm-docs/html_single/#_catching_signal_event" target="_blank" rel="noopener noreferrer"&gt;the catching intermediate signal&lt;/a&gt; will wait for the signal that the predecessor task is closed before going further.&lt;/p&gt; &lt;div id="attachment_684707" style="width: 333px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-684707" class="wp-image-684707 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Fig-220.png" alt="jBPM section showing catching intermediate signal setup" width="323" height="199" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Fig-220.png 323w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Fig-220-300x185.png 300w" sizes="(max-width: 323px) 100vw, 323px" /&gt;&lt;p id="caption-attachment-684707" class="wp-caption-text"&gt;Figure 11: Set up the catching intermediate signal.&lt;/p&gt;&lt;/div&gt; &lt;p style="padding-left: 40px;"&gt;&lt;strong&gt;Note:&lt;/strong&gt; You also need to create &lt;a href="https://developers.redhat.com/blog/?p=676127"&gt;the task subprocess&lt;/a&gt;. Leave the Called Element property blank until you have done that.&lt;/p&gt; &lt;p&gt;The only variable that needs to be passed to the subprocess is &lt;code&gt;pData&lt;/code&gt; of type &lt;code&gt;com.health_insurance.phm_model.Response&lt;/code&gt;, as shown in Figure 12.&lt;/p&gt; &lt;div id="attachment_684717" style="width: 604px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-684717" class="wp-image-684717 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Fig-208.png" alt="jBPM Data Inputs and Assignments section." width="594" height="277" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Fig-208.png 594w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Fig-208-300x140.png 300w" sizes="(max-width: 594px) 100vw, 594px" /&gt;&lt;p id="caption-attachment-684717" class="wp-caption-text"&gt;Figure 12: Pass the necessary data to the subprocess.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Finally, send the signal that the current process is closed. Note that the name of the signal is parameterized with the current task ID, as shown in Figure 13.&lt;/p&gt; &lt;div id="attachment_684727" style="width: 330px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-684727" class="wp-image-684727 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-FIg-222.png" alt="jBPM setup to send the signal that the current process is closed." width="320" height="203" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-FIg-222.png 320w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-FIg-222-300x190.png 300w" sizes="(max-width: 320px) 100vw, 320px" /&gt;&lt;p id="caption-attachment-684727" class="wp-caption-text"&gt;Figure 13: Close the current process.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;Now you have your data model and you have created your trigger process in jBPM. In the next article, we will walk through creating each component of the task subprocess.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F19%2Fdesigning-an-event-driven-business-process-at-scale-a-health-management-example-part-1%2F&amp;#38;linkname=Designing%20an%20event-driven%20business%20process%20at%20scale%3A%20A%20health%20management%20example%2C%20Part%201" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F19%2Fdesigning-an-event-driven-business-process-at-scale-a-health-management-example-part-1%2F&amp;#38;linkname=Designing%20an%20event-driven%20business%20process%20at%20scale%3A%20A%20health%20management%20example%2C%20Part%201" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F19%2Fdesigning-an-event-driven-business-process-at-scale-a-health-management-example-part-1%2F&amp;#38;linkname=Designing%20an%20event-driven%20business%20process%20at%20scale%3A%20A%20health%20management%20example%2C%20Part%201" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F19%2Fdesigning-an-event-driven-business-process-at-scale-a-health-management-example-part-1%2F&amp;#38;linkname=Designing%20an%20event-driven%20business%20process%20at%20scale%3A%20A%20health%20management%20example%2C%20Part%201" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F19%2Fdesigning-an-event-driven-business-process-at-scale-a-health-management-example-part-1%2F&amp;#38;linkname=Designing%20an%20event-driven%20business%20process%20at%20scale%3A%20A%20health%20management%20example%2C%20Part%201" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F19%2Fdesigning-an-event-driven-business-process-at-scale-a-health-management-example-part-1%2F&amp;#38;linkname=Designing%20an%20event-driven%20business%20process%20at%20scale%3A%20A%20health%20management%20example%2C%20Part%201" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F19%2Fdesigning-an-event-driven-business-process-at-scale-a-health-management-example-part-1%2F&amp;#38;linkname=Designing%20an%20event-driven%20business%20process%20at%20scale%3A%20A%20health%20management%20example%2C%20Part%201" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F19%2Fdesigning-an-event-driven-business-process-at-scale-a-health-management-example-part-1%2F&amp;#038;title=Designing%20an%20event-driven%20business%20process%20at%20scale%3A%20A%20health%20management%20example%2C%20Part%201" data-a2a-url="https://developers.redhat.com/blog/2020/02/19/designing-an-event-driven-business-process-at-scale-a-health-management-example-part-1/" data-a2a-title="Designing an event-driven business process at scale: A health management example, Part 1"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/02/19/designing-an-event-driven-business-process-at-scale-a-health-management-example-part-1/"&gt;Designing an event-driven business process at scale: A health management example, Part 1&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/Bf3aemT1j1g" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;The concept of a business process (BP), or workflow (WF), and the discipline and practice of business process management (BPM) have been around since the early 90s. Since then, WF/BPM tools have evolved considerably. More recently, a convergence of different tools has taken place, adding decision management (DM) and case management (CM) to the mix. [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/02/19/designing-an-event-driven-business-process-at-scale-a-health-management-example-part-1/"&gt;Designing an event-driven business process at scale: A health management example, Part 1&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><post-id xmlns="com-wordpress:feed-additions:1">676127</post-id><dc:creator>mcarioli</dc:creator><dc:date>2020-02-19T08:00:16Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/02/19/designing-an-event-driven-business-process-at-scale-a-health-management-example-part-1/</feedburner:origLink></entry><entry><title>Metrics and traces correlation in Kiali</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/icPMIPuUN4A/" /><category term="Kubernetes" /><category term="Microservices" /><category term="Service Mesh" /><category term="distributed tracing" /><category term="istio" /><category term="Jaeger" /><category term="Kiali" /><category term="observability" /><author><name>Joel Takvorian</name></author><id>https://developers.redhat.com/blog/?p=680837</id><updated>2020-02-18T08:00:42Z</updated><published>2020-02-18T08:00:42Z</published><content type="html">&lt;p&gt;Metrics, traces, and logs might be &lt;a href="https://www.oreilly.com/library/view/distributed-systems-observability/9781492033431/ch04.html" target="_blank" rel="noopener noreferrer"&gt;the Three Pillars of Observability&lt;/a&gt;, as you&amp;#8217;ve certainly already heard. This mantra helps us focus our mindset around observability, but it is not a religion. &amp;#8220;There is so much more data that can help us have insight into our running systems,&amp;#8221; &lt;a href="https://www.youtube.com/watch?v=MkSdvPdS1oA" target="_blank" rel="noopener noreferrer"&gt;said Frederic Branczyk at KubeCon&lt;/a&gt; last year.&lt;/p&gt; &lt;p&gt;These three kind of signals do have their specificities, but they also have common denominators that we can generalize. They could all appear on a virtual timeline and they all originate from a workload, so they are timed and sourced, which is a good start for enabling correlation. If there&amp;#8217;s anything as important as knowing the signals that a system can emit, it&amp;#8217;s knowing the relationships between those signals and being able to correlate one with another, even when they&amp;#8217;re not strictly of the same nature. Ultimately, we can postulate that any sort of signal that is timed and sourced is a good candidate for correlation as well, even if we don’t have hard links between them.&lt;/p&gt; &lt;p&gt;&lt;span id="more-680837"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;This fact is, of course, not something new. Correlation has always been possible, but the true stake is to make it easier, and hence cheaper. What makes correlation easier today? I can see at least one pattern that helps, and that we see more and more in monitoring systems: An automatic and consistent sourcing of incoming signals.&lt;/p&gt; &lt;p&gt;When you use Prometheus in Kubernetes, the Kubernetes service discovery might be enabled and configured for &lt;a href="https://github.com/prometheus/prometheus/blob/03a9e7f72e072c6d29f422425d8acd91a957836b/documentation/examples/prometheus-kubernetes.yml#L274-L275" target="_blank" rel="noopener noreferrer"&gt;label mapping&lt;/a&gt;. As the name suggests, this mechanism maps pods&amp;#8217; existing labels to Prometheus labels, or in other words, it forwards source context into metrics (hence, allowing filters and aggregations based on that information). This setup participates in automatic and consistent sourcing. &lt;a href="https://grafana.com/oss/loki/" target="_blank" rel="noopener noreferrer"&gt;Loki&lt;/a&gt;, for instance, has the same for logs. If you can define a context for metrics search and reuse that same context for logs search, then guess what you have? Easier correlation.&lt;/p&gt; &lt;p&gt;But that&amp;#8217;s just a step, not the end of the journey.&lt;/p&gt; &lt;h2&gt;New correlation feature in Kiali&lt;/h2&gt; &lt;p&gt;In &lt;a href="https://kiali.io/" target="_blank" rel="noopener noreferrer"&gt;Kiali&lt;/a&gt;, our observability console for &lt;a href="https://istio.io/" target="_blank" rel="noopener noreferrer"&gt;Istio&lt;/a&gt;, we recently started work regarding correlation. We still have a long way to go, but we&amp;#8217;re definitely involved. &lt;a href="https://medium.com/kialiproject/beyond-the-mesh-troubleshooting-with-kiali-af0ef2a9c977" target="_blank" rel="noopener noreferrer"&gt;In a previous post&lt;/a&gt;, I described how Kiali can help with troubleshooting by navigating between screens (graph, logs, metrics, and traces) while always keeping an active context. We wanted to do more, such as visually correlating traces and metrics, so that when we&amp;#8217;re seeing an oddly behaving metric we can try to relate it with traces—or the other way around, analyze metrics behavior near high-latency traces.&lt;/p&gt; &lt;p&gt;In order to do that, each metric chart in Kiali has now a &lt;strong&gt;Span duration&lt;/strong&gt; legend item that, when clicked, shows the spans on that chart as you can see in Figure 1.&lt;/p&gt; &lt;div id="attachment_680867" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-680867" class="wp-image-680867 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/01/Capture-d’écran-de-2020-01-27-15-25-10-1024x383.png" alt="Kiali's span duration plots displayed along with Istio request duration metric" width="640" height="239" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/01/Capture-d’écran-de-2020-01-27-15-25-10-1024x383.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/01/Capture-d’écran-de-2020-01-27-15-25-10-300x112.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/01/Capture-d’écran-de-2020-01-27-15-25-10-768x288.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/01/Capture-d’écran-de-2020-01-27-15-25-10.png 1442w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-680867" class="wp-caption-text"&gt;Figure 1: Span duration plots displayed along with Istio request duration metric.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Why spans and not traces? This chart is a service-centric view. We only want to show what is strictly related to the service to better correlate with the displayed metrics, while a trace would encompass calls from other services as well. But be reassured, we can jump from a span to its trace as shown in Figure 2. Kiali now integrates its own traces view along with external links to the Jaeger UI.&lt;/p&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;div id="attachment_680857" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-680857" class="wp-image-680857 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/01/Capture-d’écran-de-2020-01-27-15-31-22-1024x540.png" alt="Kiali displaying trace details and metadata" width="640" height="338" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/01/Capture-d’écran-de-2020-01-27-15-31-22-1024x540.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/01/Capture-d’écran-de-2020-01-27-15-31-22-300x158.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/01/Capture-d’écran-de-2020-01-27-15-31-22-768x405.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/01/Capture-d’écran-de-2020-01-27-15-31-22.png 1406w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-680857" class="wp-caption-text"&gt;Figure 2: Trace details and metadata.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;This setup is nice because we can now correlate, for instance, the Istio response time metric with actual traces and view all the metadata associated with a trace, which I’m sure will be a typical scenario in troubleshooting high latencies in Kiali. But it&amp;#8217;s not only about response time: Kiali can monitor non-Istio metrics as well, such as JVM memory. So, we could also correlate a memory increase with actual traces as shown in Figure 3 (or any other metric).&lt;/p&gt; &lt;div id="attachment_680877" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-680877" class="wp-image-680877 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/01/Capture-d’écran-de-2020-01-27-15-11-25-1024x729.png" alt="Kiali chart correlating a memory increase with actual traces." width="640" height="456" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/01/Capture-d’écran-de-2020-01-27-15-11-25-1024x729.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/01/Capture-d’écran-de-2020-01-27-15-11-25-300x214.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/01/Capture-d’écran-de-2020-01-27-15-11-25-768x547.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/01/Capture-d’écran-de-2020-01-27-15-11-25.png 1038w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-680877" class="wp-caption-text"&gt;Figure 3: Spans spike correlated with an increase of memory and threads used.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Potential pitfall&lt;/h3&gt; &lt;p&gt;There’s a pitfall, though: The spans displayed are limited in number. When the volumetry is high, this limit is quickly reached. &lt;a href="https://www.jaegertracing.io/docs/1.16/sampling/" target="_blank" rel="noopener noreferrer"&gt;Sampling strategies&lt;/a&gt; can be configured with Jaeger to limit the amount of ingested traces, but the problem remains: We might miss relevant data. Troubleshooting high latencies often means looking at p99 latencies, or p99.9, or even max. The more we want to have a sharp look, the more we need to work from a complete dataset basis.&lt;/p&gt; &lt;p&gt;Today, Kiali tries to show the most relevant spans first, such as the ones with errors or high latency. This tactic is similar to what we can do with &lt;a href="https://omnition.io/blog/intelligent-sampling-with-opencensus/" target="_blank" rel="noopener noreferrer"&gt;tail-based sampling&lt;/a&gt;, except Kiali does it at query time. This setup is also perfectible because it makes assumptions regarding what is relevant, and anyway, it will still reach a limit at some point.&lt;/p&gt; &lt;p&gt;There are several ideas around aggregation that we can consider tackling. Some tools apparently do this already, like &lt;a href="https://medium.com/pinterest-engineering/analyzing-distributed-trace-data-6aae58919949" target="_blank" rel="noopener noreferrer"&gt;shown here by Pinterest&lt;/a&gt;, and there are several possible approaches (keeping in mind that Kiali is an API-consuming tool that at the moment doesn’t come with persistent storage). Handling traces is still an open field in Kiali and people are welcome to contribute!&lt;/p&gt; &lt;h2&gt;Correlation with exemplars&lt;/h2&gt; &lt;p&gt;When it comes to correlating traces and metrics, there is another option that may come to mind: &lt;a href="https://www.youtube.com/watch?v=TzNZIEvhAdA" target="_blank" rel="noopener noreferrer"&gt;deep linking metrics and traces through exemplars&lt;/a&gt; (see the screenshot in Figure 4).&lt;/p&gt; &lt;div id="attachment_680847" style="width: 527px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-680847" class="wp-image-680847 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/01/Capture-d’écran-de-2020-01-28-09-29-37-copie.png" alt="Screen capture of the video above, featuring Rob Skillington at KubeCon 2019, San Diego, using Grafana" width="517" height="343" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/01/Capture-d’écran-de-2020-01-28-09-29-37-copie.png 517w, https://developers.redhat.com/blog/wp-content/uploads/2020/01/Capture-d’écran-de-2020-01-28-09-29-37-copie-300x199.png 300w" sizes="(max-width: 517px) 100vw, 517px" /&gt;&lt;p id="caption-attachment-680847" class="wp-caption-text"&gt;Figure 4: Correlating with exemplars (Source: The video above, featuring Rob Skillington at KubeCon 2019).&lt;/p&gt;&lt;/div&gt; &lt;p&gt;The details are being formalized in the OpenMetrics specifications. The idea is to enrich the metrics scraping endpoints with trace IDs associated with one or more metrics. That trace is an exemplar (just a single one, among potentially many others).&lt;/p&gt; &lt;p&gt;This ID will not be a Prometheus label to avoid impacting metric cardinality. The implementation in Prometheus is &lt;a href="https://github.com/prometheus/prometheus/pull/6309" target="_blank" rel="noopener noreferrer"&gt;not&lt;/a&gt; &lt;a href="https://github.com/prometheus/prometheus/pull/6635" target="_blank" rel="noopener noreferrer"&gt;finished&lt;/a&gt; &lt;a href="https://github.com/prometheus/client_golang/issues/682" target="_blank" rel="noopener noreferrer"&gt;yet&lt;/a&gt;. In Jaeger, we can imagine that the presence of exemplars would influence sampling decisions, but this issue is not relevant today. This is definitely a hot topic among Prometheus/Grafana/tracing communities. We are following it with interest for Kiali.&lt;/p&gt; &lt;p&gt;However, again, questions might be raised about the representativeness of a single exemplar among many traces. Correlation is not done just for the sake of correlation, but because it helps solve a real problem. Exemplar linking will help to spot &lt;em&gt;some&lt;/em&gt; of them or figure out &lt;em&gt;some&lt;/em&gt; business/technical processes involved while looking at metrics. But, there&amp;#8217;s more that we can do in the field of trace/span aggregation in order to better figure out the health of a system and to troubleshoot. (Not as opposed to exemplars, but as a complement in the debugger&amp;#8217;s toolset.)&lt;/p&gt; &lt;h2&gt;So, what&amp;#8217;s next?&lt;/h2&gt; &lt;p&gt;We will continue to work on correlations and traces, such as considering more signals and easing the troubleshooting path. And why not analytics as well? If you have any suggestions or comments, do not hesitate to get in touch. Remember that Kiali is an open source project and &lt;a href="https://kiali.io/contribute/" target="_blank" rel="noopener noreferrer"&gt;you&amp;#8217;re welcome to contribute&lt;/a&gt; with code, or ideas, or both.&lt;/p&gt; &lt;p&gt;&lt;span style="color: #808080"&gt;&lt;em&gt;Thanks to Simon Pasquier, Gary Brown, Alissa Bonas and Juca Paixão Kröhling for reviewing and sharing ideas.&lt;/em&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F18%2Fmetrics-and-traces-correlation-in-kiali%2F&amp;#38;linkname=Metrics%20and%20traces%20correlation%20in%20Kiali" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F18%2Fmetrics-and-traces-correlation-in-kiali%2F&amp;#38;linkname=Metrics%20and%20traces%20correlation%20in%20Kiali" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F18%2Fmetrics-and-traces-correlation-in-kiali%2F&amp;#38;linkname=Metrics%20and%20traces%20correlation%20in%20Kiali" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F18%2Fmetrics-and-traces-correlation-in-kiali%2F&amp;#38;linkname=Metrics%20and%20traces%20correlation%20in%20Kiali" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F18%2Fmetrics-and-traces-correlation-in-kiali%2F&amp;#38;linkname=Metrics%20and%20traces%20correlation%20in%20Kiali" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F18%2Fmetrics-and-traces-correlation-in-kiali%2F&amp;#38;linkname=Metrics%20and%20traces%20correlation%20in%20Kiali" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F18%2Fmetrics-and-traces-correlation-in-kiali%2F&amp;#38;linkname=Metrics%20and%20traces%20correlation%20in%20Kiali" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F18%2Fmetrics-and-traces-correlation-in-kiali%2F&amp;#038;title=Metrics%20and%20traces%20correlation%20in%20Kiali" data-a2a-url="https://developers.redhat.com/blog/2020/02/18/metrics-and-traces-correlation-in-kiali/" data-a2a-title="Metrics and traces correlation in Kiali"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/02/18/metrics-and-traces-correlation-in-kiali/"&gt;Metrics and traces correlation in Kiali&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/icPMIPuUN4A" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Metrics, traces, and logs might be the Three Pillars of Observability, as you&amp;#8217;ve certainly already heard. This mantra helps us focus our mindset around observability, but it is not a religion. &amp;#8220;There is so much more data that can help us have insight into our running systems,&amp;#8221; said Frederic Branczyk at KubeCon last year. These [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/02/18/metrics-and-traces-correlation-in-kiali/"&gt;Metrics and traces correlation in Kiali&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><post-id xmlns="com-wordpress:feed-additions:1">680837</post-id><dc:creator>Joel Takvorian</dc:creator><dc:date>2020-02-18T08:00:42Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/02/18/metrics-and-traces-correlation-in-kiali/</feedburner:origLink></entry><entry><title>Continuous integration with GDB Buildbot</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/wmNrJUPiasA/" /><category term="CI/CD" /><category term="Developer Tools" /><category term="Open source" /><category term="buildbot" /><category term="Bunsen" /><category term="Continuous Integration" /><category term="GNU Project Debugger" /><author><name>Sergio Durigan Junior</name></author><id>https://developers.redhat.com/blog/?p=645197</id><updated>2020-02-17T08:00:38Z</updated><published>2020-02-17T08:00:38Z</published><content type="html">&lt;p&gt;Continuous integration is a hot topic these days, and the &lt;a href="https://www.gnu.org/software/gdb/" target="_blank" rel="noopener noreferrer"&gt;GNU Project Debugger&lt;/a&gt; is keeping up with the trend. Who better to serve as a role model for tracking and exterminating bugs than a debugger?&lt;/p&gt; &lt;p&gt;The &lt;a href="https://gdb-buildbot.osci.io" target="_blank" rel="noopener noreferrer"&gt;GDB Buildbot&lt;/a&gt; started as a pet project back in 2014 but is now an integral part of the development process. It provides an infrastructure to test new commits pushed to the official repository, as well as a service (which we call &lt;em&gt;try builds&lt;/em&gt;) for developers to submit their proposed changes. In this article, I share the story of our &lt;a href="https://buildbot.net/" target="_blank" rel="noopener noreferrer"&gt;Buildbot&lt;/a&gt; instance, where we are right now in terms of functionality, and the plans (and challenges) for the future.&lt;/p&gt; &lt;p&gt;&lt;span id="more-645197"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;Continuous integration&lt;/h2&gt; &lt;p&gt;First things first: It is important to define what &lt;em&gt;continuous integration&lt;/em&gt; is. According to &lt;a href="https://en.wikipedia.org/wiki/Continuous_integration" target="_blank" rel="noopener noreferrer"&gt;Wikipedia&lt;/a&gt;:&lt;/p&gt; &lt;blockquote&gt;&lt;p&gt;&lt;em&gt;[&amp;#8230;] continuous integration (CI) is the practice of merging all developers&amp;#8217; working copies to a shared &lt;a title="Trunk (software)" data-noscript-removed-href="https://en.wikipedia.org/wiki/Trunk_(software)"&gt;mainline&lt;/a&gt; several times a day. [&amp;#8230;]&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt; &lt;p&gt;Not very clear. In other words, CI is an automated system that continuously compiles and tests a project&amp;#8217;s codebase. It is common for CI systems to test every single commit in a project. This way, if something breaks, the developers are able to fix the problem much faster. Usually, the CI test is done &lt;em&gt;before&lt;/em&gt; the commit is actually integrated into the codebase. The GDB project, however, uses a different approach: CI is performed &lt;em&gt;after&lt;/em&gt; the code has been pushed upstream.&lt;/p&gt; &lt;h2&gt;Once upon a time&lt;/h2&gt; &lt;p&gt;Back in 2014, the GDB project did not have a continuous integration tool. Developers kindly provided testsuite results and reported regressions in the code, often using their own machines. However, these developers had limited resources and could not test various architectures simultaneously. Compilation failures were often not caught in systems that are not widely used. Ultimately, this issue caused delays and annoyances during the release process (or in the worst cases) after GDB was released.&lt;/p&gt; &lt;p&gt;In an attempt to mitigate this problem, the GDB Buildbot was set up. Only GNU/Linux running on Intel/AMD 32 and 64-bit was supported at the beginning, but the community quickly started to contribute toward support other machines and architectures. The initial setup compiled and tested the code using common configure flags, but developers still needed to consult the web page in order to know the results.&lt;/p&gt; &lt;p&gt;Over time, the instance has been improved and new features were added, including email notifications whenever a commit introduced a compilation failure, and email notifications to the &lt;a href="https://sourceware.org/ml/gdb-testers/" target="_blank" rel="noopener noreferrer"&gt;gdb-testers&lt;/a&gt; mailing list containing the results of each testsuite run.&lt;/p&gt; &lt;p&gt;Perhaps one of the most useful features was the &lt;em&gt;try build&lt;/em&gt; system.&lt;/p&gt; &lt;h2&gt;And try builds for all&lt;/h2&gt; &lt;p&gt;The community started noticing the benefits of having a CI system, but we wanted more. Buildbot can test patches even &lt;em&gt;before&lt;/em&gt; they are pushed to the &lt;em&gt;master&lt;/em&gt; branch in the repository, which can be a useful tool for the developer. For example, a developer may not have access to a lot of different architectures to test a patch on. For this reason, we enabled the &lt;em&gt;try build&lt;/em&gt; feature on Buildbot. Access to try builds is restricted to GDB developers who have &lt;em&gt;push&lt;/em&gt; access to the repository; several of them already use this service daily.&lt;/p&gt; &lt;p&gt;When a developer submits a patch to the try build service, Buildbot will build, test and send the developer email containing the results. This setup is a convenient way to quickly know if the change breaks something in the project.&lt;/p&gt; &lt;h2&gt;Challenges: A &lt;span class="result__url__full"&gt;Schrödinger&lt;/span&gt; test&lt;/h2&gt; &lt;p&gt;Perhaps the biggest challenge we have right now is what we call &lt;em&gt;racy&lt;/em&gt; (or &lt;em&gt;non-deterministic&lt;/em&gt;) &lt;em&gt;tests&lt;/em&gt;. These tests can pass or fail depending on several factors, such as race conditions in their code, system load, and parallelism. As a community, we have been fixing these problems for a long time now. Even though we have made a lot of progress, there is a long way ahead. These tests cause the GDB Buildbot results to be unpredictable, which ultimately undermines the developers&amp;#8217; trust in the CI system.&lt;/p&gt; &lt;p&gt;The difficulty in obtaining machines for architectures and systems that are not so widely used is another challenge. At the time of this writing, we have machines building for Intel/AMD 32 and 64-bit, S/390x, SPARC v9, AArch64, and ARMhf. These machines are testing GNU/Linux, FreeBSD, and other operating systems.&lt;/p&gt; &lt;p&gt;Last, but not least, we can mention the fact that the infrastructure is maintained by one person only (yours truly). This setup has always been this way, but it can become a problem if I am too busy with more pressing work.&lt;/p&gt; &lt;h2&gt;A look at the horizon&lt;/h2&gt; &lt;p&gt;The GDB Buildbot instance has proved to be an important part of the community infrastructure. Once the problem with racy tests is solved, we will be able to:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Send email notifications with test results directly to our main mailing list, &lt;a href="https://sourceware.org/ml/gdb-patches/" target="_blank" rel="noopener noreferrer"&gt;gdb-patches&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;Send email notifications with test results directly to commit authors.&lt;/li&gt; &lt;li&gt;Implement a way to perform the CI tests &lt;em&gt;before&lt;/em&gt; the commit is integrated into our codebase.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Another interesting project being developed is &lt;a href="https://github.com/serhei/bunsen" target="_blank" rel="noopener noreferrer"&gt;Bunsen&lt;/a&gt;. Its purpose is to provide a better way to analyze the testsuite results generated by the DejaGNU framework, which is used by GDB. In fact, Bunsen is tested through GDB Buildbot&amp;#8217;s own test results. Once Bunsen is considered mature enough, this tool will certainly be integrated into our instance.&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;The GDB Buildbot is an ongoing effort to improve code quality and help developers spend less time looking for regressions. There are many possibilities for enhancing the service and lots of ideas for new features. If you are looking for a way to contribute to GDB, helping with the CI system is certainly a good way to start.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F17%2Fcontinuous-integration-with-gdb-buildbot%2F&amp;#38;linkname=Continuous%20integration%20with%20GDB%20Buildbot" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F17%2Fcontinuous-integration-with-gdb-buildbot%2F&amp;#38;linkname=Continuous%20integration%20with%20GDB%20Buildbot" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F17%2Fcontinuous-integration-with-gdb-buildbot%2F&amp;#38;linkname=Continuous%20integration%20with%20GDB%20Buildbot" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F17%2Fcontinuous-integration-with-gdb-buildbot%2F&amp;#38;linkname=Continuous%20integration%20with%20GDB%20Buildbot" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F17%2Fcontinuous-integration-with-gdb-buildbot%2F&amp;#38;linkname=Continuous%20integration%20with%20GDB%20Buildbot" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F17%2Fcontinuous-integration-with-gdb-buildbot%2F&amp;#38;linkname=Continuous%20integration%20with%20GDB%20Buildbot" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F17%2Fcontinuous-integration-with-gdb-buildbot%2F&amp;#38;linkname=Continuous%20integration%20with%20GDB%20Buildbot" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F17%2Fcontinuous-integration-with-gdb-buildbot%2F&amp;#038;title=Continuous%20integration%20with%20GDB%20Buildbot" data-a2a-url="https://developers.redhat.com/blog/2020/02/17/continuous-integration-with-gdb-buildbot/" data-a2a-title="Continuous integration with GDB Buildbot"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/02/17/continuous-integration-with-gdb-buildbot/"&gt;Continuous integration with GDB Buildbot&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/wmNrJUPiasA" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Continuous integration is a hot topic these days, and the GNU Project Debugger is keeping up with the trend. Who better to serve as a role model for tracking and exterminating bugs than a debugger? The GDB Buildbot started as a pet project back in 2014 but is now an integral part of the development [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/02/17/continuous-integration-with-gdb-buildbot/"&gt;Continuous integration with GDB Buildbot&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><post-id xmlns="com-wordpress:feed-additions:1">645197</post-id><dc:creator>Sergio Durigan Junior</dc:creator><dc:date>2020-02-17T08:00:38Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/02/17/continuous-integration-with-gdb-buildbot/</feedburner:origLink></entry><entry><title>Keycloak 9.0.0 released</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/jr0uWY2n0fg/keycloak-900-released.html" /><category term="feed_group_name_keycloak" scheme="searchisko:content:tags" /><category term="feed_name_keycloak" scheme="searchisko:content:tags" /><category term="Keycloak Release" scheme="searchisko:content:tags" /><author><name>Keycloak</name></author><id>searchisko:content:id:jbossorg_blog-keycloak_9_0_0_released</id><updated>2020-02-17T00:00:00Z</updated><published>2020-02-17T00:00:00Z</published><content type="html">&lt;p&gt;To download the release go to &lt;a href="https://www.keycloak.org/downloads.html"&gt;Keycloak downloads&lt;/a&gt;.&lt;/p&gt; &lt;div class="sect1"&gt; &lt;h2 id="_highlights"&gt;Highlights&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="sect2"&gt; &lt;h3 id="_drools_policy_removed"&gt;Drools Policy Removed&lt;/h3&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The Drools Policy was finally removed after the deprecation period. If you need more complex policies you can still use JavaScript-based policies.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect2"&gt; &lt;h3 id="_pagination_support_for_clients"&gt;Pagination support for clients&lt;/h3&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Pagination support was added to clients in the Admin Console and REST API. Thanks to &lt;a href="https://github.com/saibot94"&gt;saibot94&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect2"&gt; &lt;h3 id="_new_elytron_credential_store_vault_provider"&gt;New Elytron Credential Store Vault Provider&lt;/h3&gt; &lt;div class="paragraph"&gt; &lt;p&gt;A new built-in vault provider that reads secrets from a keystore-backed Elytron credential store has been added as a WildFly extension. The creation and management of the credential store is handled by Elytron using either the &lt;code&gt;elytron&lt;/code&gt; subsystem or the &lt;code&gt;elytron-tool.sh&lt;/code&gt; script.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect2"&gt; &lt;h3 id="_more_updates_to_w3c_webauthn_and_authentication_flows"&gt;More updates to W3C WebAuthn and Authentication flows&lt;/h3&gt; &lt;div class="paragraph"&gt; &lt;p&gt;In this release, we did some usability improvements to the authentication flows. It should be easier for the end user to choose between available authentication mechanisms for two-factor authentication. It should be more intuitive to log in with OTP or WebAuthn considering the fact that user can have more OTP or WebAuthn credentials. There is also better support for passwordless WebAuthn authentication. Finally, we did some work on defects related to the authentication flows.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect2"&gt; &lt;h3 id="_improved_handling_of_user_locale"&gt;Improved handling of user locale&lt;/h3&gt; &lt;div class="paragraph"&gt; &lt;p&gt;A number of improvements have been made to how the locale for the login page is selected, as well as when the locale is updated for a user.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;See the &lt;a href="https://www.keycloak.org/docs/latest/server_admin/#_user_locale_selection"&gt;Server Administration Guide&lt;/a&gt; for more details.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect2"&gt; &lt;h3 id="_other_improvements"&gt;Other improvements&lt;/h3&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Authorization Header token is only considered now when type is Bearer on Gatekeeper. Thanks to &lt;a href="https://github.com/HansK-p"&gt;HansK-p&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;More algorithms are supported for the client authentication with signed client secret JWT. Namely HS384 and HS512 algorithms were added. Thanks to &lt;a href="https://github.com/tnorimat"&gt;tnorimat&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;h2&gt;All resolved issues&lt;/h2&gt; &lt;p&gt;The full list of resolved issues are available in &lt;a href="https://issues.jboss.org/issues/?jql=project%20%3D%20keycloak%20and%20fixVersion%20%3D%209.0.0"&gt;JIRA&lt;/a&gt;&lt;/p&gt; &lt;h2&gt;Upgrading&lt;/h2&gt; &lt;p&gt;Before you upgrade remember to backup your database and check the &lt;a href="https://www.keycloak.org/docs/latest/upgrading/index.html"&gt;upgrade guide&lt;/a&gt; for anything that may have changed.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/jr0uWY2n0fg" height="1" width="1" alt=""/&gt;</content><summary>To download the release go to Keycloak downloads. Highlights Drools Policy Removed The Drools Policy was finally removed after the deprecation period. If you need more complex policies you can still use JavaScript-based policies. Pagination support for clients Pagination support was added to clients in the Admin Console and REST API. Thanks to saibot94. New Elytron Credential Store Vault Provider ...</summary><dc:creator>Keycloak</dc:creator><dc:date>2020-02-17T00:00:00Z</dc:date><feedburner:origLink>https://www.keycloak.org/2020/02/keycloak-900-released.html</feedburner:origLink></entry></feed>
